From 5ddfdb4236d806f09c7bb7a7072d0a816476b226 Mon Sep 17 00:00:00 2001
From: ChonDoit <thphantomblog@gmail.com>
Date: Tue, 16 Aug 2022 00:07:04 +0000
Subject: [PATCH 01/17] Revert "udfps: Implement framework dimming support"

This reverts commit ff855f954454e47b781efe5d1e9efe91464dd47c.
---
 .../SystemUI/res/values/cherish_config.xml    | 24 ---------
 .../systemui/biometrics/UdfpsController.java  | 52 -------------------
 2 files changed, 76 deletions(-)

diff --git a/packages/SystemUI/res/values/cherish_config.xml b/packages/SystemUI/res/values/cherish_config.xml
index 229004a2a625..fe3253628123 100644
--- a/packages/SystemUI/res/values/cherish_config.xml
+++ b/packages/SystemUI/res/values/cherish_config.xml
@@ -42,30 +42,6 @@
 	
 	<!-- Allow devices override audio panel location to the left side -->
     <bool name="config_audioPanelOnLeftSide">false</bool>
-	
-	<!-- Flag to enable framework dimming for udfps -->
-    <bool name="config_udfpsFrameworkDimming">false</bool>
-    <!-- Array of brightness-alpha lut for framework dimming -->
-    <string-array name="config_udfpsDimmingBrightnessAlphaArray" translatable="false">
-          <!-- Example:
-          <item>0,255</item>
-          <item>1,234</item>
-          <item>3,227</item>
-          <item>8,208</item>
-          <item>16,192</item>
-          <item>27,176</item>
-          <item>41,160</item>
-          <item>61,144</item>
-          <item>80,128</item>
-          <item>104,112</item>
-          <item>130,96</item>
-          <item>158,80</item>
-          <item>188,64</item>
-          <item>221,48</item>
-          <item>250,36</item>
-          <item>255,33</item>
-          -->
-    </string-array>
 
     <!-- Doze: does the double tap sensor need a proximity check? -->
     <bool name="doze_double_tap_proximity_check">false</bool>
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
index 5453c32f6433..a2b5ec662970 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
@@ -176,8 +176,6 @@ public class UdfpsController implements DozeReceiver, UdfpsHbmProvider {
     private boolean mAttemptedToDismissKeyguard;
     private final int mUdfpsVendorCode;
     private Set<Callback> mCallbacks = new HashSet<>();
-    private boolean mFrameworkDimming;
-    private int[][] mBrightnessAlphaArray;
 
     private final SystemSettings mSystemSettings;
     private boolean mScreenOffFod;
@@ -677,11 +675,6 @@ public class UdfpsController implements DozeReceiver, UdfpsHbmProvider {
         mCoreLayoutParams.layoutInDisplayCutoutMode =
                 WindowManager.LayoutParams.LAYOUT_IN_DISPLAY_CUTOUT_MODE_ALWAYS;
         mCoreLayoutParams.privateFlags = WindowManager.LayoutParams.PRIVATE_FLAG_TRUSTED_OVERLAY;
-        mCoreLayoutParams.dimAmount = 0;
-
-        mFrameworkDimming = mContext.getResources().getBoolean(R.bool.config_udfpsFrameworkDimming);
-
-        parseBrightnessAlphaArray();
 
         mFingerprintManager.setUdfpsOverlayController(new UdfpsOverlayController());
 
@@ -794,7 +787,6 @@ public class UdfpsController implements DozeReceiver, UdfpsHbmProvider {
         final int paddingY = animation != null ? animation.getPaddingY() : 0;
 
         mCoreLayoutParams.flags = Utils.FINGERPRINT_OVERLAY_LAYOUT_PARAM_FLAGS
-                | WindowManager.LayoutParams.FLAG_DIM_BEHIND
                 | WindowManager.LayoutParams.FLAG_SPLIT_TOUCH;
         if (animation != null && animation.listenForTouchesOutsideView()) {
             mCoreLayoutParams.flags |= WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH;
@@ -1083,8 +1075,6 @@ public class UdfpsController implements DozeReceiver, UdfpsHbmProvider {
             return;
         }
 
-        updateViewDimAmount(true);
-
         if (mView.getAnimationViewController() instanceof UdfpsKeyguardViewController
                 && !mStatusBarStateController.isDozing()) {
             mKeyguardBypassController.setUserHasDeviceEntryIntent(true);
@@ -1135,7 +1125,6 @@ public class UdfpsController implements DozeReceiver, UdfpsHbmProvider {
         if (mView.isIlluminationRequested()) {
             mView.stopIllumination();
         }
-        updateViewDimAmount(false);
     }
 
     private void updateTouchListener() {
@@ -1183,45 +1172,4 @@ public class UdfpsController implements DozeReceiver, UdfpsHbmProvider {
             mMainHandler.post(onHbmDisabled);
         }
     }
-	
-	private static int interpolate(int x, int xa, int xb, int ya, int yb) {
-        return ya - (ya - yb) * (x - xa) / (xb - xa);
-    }
-    private void updateViewDimAmount(boolean pressed) {
-        if (mFrameworkDimming) {
-            if (pressed) {
-                int curBrightness = Settings.System.getInt(mContext.getContentResolver(),
-                        Settings.System.SCREEN_BRIGHTNESS, 100);
-                int i, dimAmount;
-                for (i = 0; i < mBrightnessAlphaArray.length; i++) {
-                    if (mBrightnessAlphaArray[i][0] >= curBrightness) break;
-                }
-                if (i == 0) {
-                    dimAmount = mBrightnessAlphaArray[i][1];
-                } else if (i == mBrightnessAlphaArray.length) {
-                    dimAmount = mBrightnessAlphaArray[i-1][1];
-                } else {
-                    dimAmount = interpolate(curBrightness,
-                            mBrightnessAlphaArray[i][0], mBrightnessAlphaArray[i-1][0],
-                            mBrightnessAlphaArray[i][1], mBrightnessAlphaArray[i-1][1]);
-                }
-                mCoreLayoutParams.dimAmount = dimAmount / 255.0f;
-            } else {
-                mCoreLayoutParams.dimAmount = 0;
-            }
-            mWindowManager.updateViewLayout(mView, mCoreLayoutParams);
-        }
-    }
-    private void parseBrightnessAlphaArray() {
-        if (mFrameworkDimming) {
-            String[] array = mContext.getResources().getStringArray(
-                    R.array.config_udfpsDimmingBrightnessAlphaArray);
-            mBrightnessAlphaArray = new int[array.length][2];
-            for (int i = 0; i < array.length; i++) {
-                String[] s = array[i].split(",");
-                mBrightnessAlphaArray[i][0] = Integer.parseInt(s[0]);
-                mBrightnessAlphaArray[i][1] = Integer.parseInt(s[1]);
-            }
-        }
-    }
 }
-- 
2.17.1


From d8dabcbd5aa48985cd4a3735ddabf19b88262f01 Mon Sep 17 00:00:00 2001
From: ChonDoit <thphantomblog@gmail.com>
Date: Tue, 16 Aug 2022 00:08:52 +0000
Subject: [PATCH 02/17] Revert "SystemUI: Add HBM provider for UDFPS on Pixel
 devices"

This reverts commit 886e8ba1151e6de6fef9952e091b5433374589cf.
---
 .../src/com/android/systemui/Dependency.java  |   4 -
 .../biometrics/PixelUdfpsHbmProvider.kt       | 148 ------------------
 2 files changed, 152 deletions(-)
 delete mode 100644 packages/SystemUI/src/com/android/systemui/biometrics/PixelUdfpsHbmProvider.kt

diff --git a/packages/SystemUI/src/com/android/systemui/Dependency.java b/packages/SystemUI/src/com/android/systemui/Dependency.java
index a4999000e4e3..480ad827c817 100644
--- a/packages/SystemUI/src/com/android/systemui/Dependency.java
+++ b/packages/SystemUI/src/com/android/systemui/Dependency.java
@@ -40,7 +40,6 @@ import com.android.systemui.accessibility.AccessibilityButtonTargetsObserver;
 import com.android.systemui.accessibility.floatingmenu.AccessibilityFloatingMenuController;
 import com.android.systemui.appops.AppOpsController;
 import com.android.systemui.assist.AssistManager;
-import com.android.systemui.biometrics.AuthController;
 import com.android.systemui.broadcast.BroadcastDispatcher;
 import com.android.systemui.colorextraction.SysuiColorExtractor;
 import com.android.systemui.dagger.SysUISingleton;
@@ -379,7 +378,6 @@ public class Dependency {
     @Inject Lazy<GroupExpansionManager> mGroupExpansionManagerLazy;
     @Inject Lazy<PulseController> mPulseController;
     @Inject Lazy<TaskHelper> mTaskHelper;
-    @Inject Lazy<AuthController> mAuthController;
 
     @Inject
     public Dependency() {
@@ -604,8 +602,6 @@ public class Dependency {
         mProviders.put(GroupExpansionManager.class, mGroupExpansionManagerLazy::get);
         mProviders.put(PulseController.class, mPulseController::get);
 
-        mProviders.put(AuthController.class, mAuthController::get);
-
         mProviders.put(OmniSettingsService.class, mOmniSettingsService::get);
 
         Dependency.setInstance(this);
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/PixelUdfpsHbmProvider.kt b/packages/SystemUI/src/com/android/systemui/biometrics/PixelUdfpsHbmProvider.kt
deleted file mode 100644
index f105bf32dab5..000000000000
--- a/packages/SystemUI/src/com/android/systemui/biometrics/PixelUdfpsHbmProvider.kt
+++ /dev/null
@@ -1,148 +0,0 @@
-/*
- * Copyright (C) 2021 The ProtonAOSP Project
- * Copyright (C) 2022 The LineageOS Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.systemui.biometrics
-
-import android.content.Context
-import android.hardware.display.DisplayManager
-import android.os.Handler
-import android.os.IBinder
-import android.os.ServiceManager
-import android.view.Surface
-import com.android.systemui.biometrics.AuthController
-import com.android.systemui.dagger.qualifiers.DisplayId
-import com.android.systemui.dagger.qualifiers.Main
-import com.android.systemui.dagger.qualifiers.UiBackground
-import com.android.systemui.Dependency
-import com.google.hardware.pixel.display.IDisplay
-import java.util.concurrent.Executor
-
-class PixelUdfpsHbmProvider constructor(
-    private val context: Context
-) : UdfpsHbmProvider, IBinder.DeathRecipient, DisplayManager.DisplayListener {
-
-    private val authController = Dependency.get(AuthController::class.java)
-    private val bgExecutor = Dependency.get(Dependency.BACKGROUND_EXECUTOR)
-    private val handler = Dependency.get(Dependency.MAIN_HANDLER)
-    private val displayId = context.getDisplayId()
-    private val displayManager = context.getSystemService(DisplayManager::class.java)
-
-    private var displayHal = ServiceManager.waitForDeclaredService(PIXEL_DISPLAY_HAL)
-            .let { binder ->
-                binder.linkToDeath(this, 0)
-                IDisplay.Stub.asInterface(binder)
-            }
-
-    private val peakRefreshRate = displayManager.getDisplay(displayId).supportedModes
-            .maxOf { it.refreshRate }
-    private val currentRefreshRate: Float
-        get() = displayManager.getDisplay(displayId).refreshRate
-
-    // Used by both main and UI background threads
-    @Volatile private var pendingEnable = false
-    @Volatile private var pendingEnableCallback: Runnable? = null
-
-    init {
-        // Listen for refresh rate changes
-        displayManager.registerDisplayListener(this, handler)
-    }
-
-    override fun enableHbm(hbmType: Int, surface: Surface?, onHbmEnabled: Runnable?) {
-        if (hbmType != HBM_TYPE) {
-            return
-        }
-
-        // Run the callback and skip enabling if already enabled
-        // (otherwise it may fail, similar to disabling)
-        if (displayHal.getLhbmState()) {
-            onHbmEnabled?.run()
-            return
-        }
-
-        // Takes 20-30 ms, so switch to background
-        bgExecutor.execute {
-            // Request HbmSVManager to lock the refresh rate. On the Pixel 6 Pro (raven), LHBM only
-            // works at peak refresh rate.
-            authController.udfpsHbmListener?.onHbmEnabled(hbmType, displayId)
-
-            if (currentRefreshRate == peakRefreshRate) {
-                // Enable immediately if refresh rate is correct
-                doPendingEnable(onHbmEnabled)
-            } else {
-                // Otherwise, queue it and wait for the refresh rate update callback
-                pendingEnable = true
-                pendingEnableCallback = onHbmEnabled
-            }
-        }
-    }
-
-    private fun doPendingEnable(callback: Runnable? = null) {
-        displayHal?.setLhbmState(true)
-        // Make sure callback runs on main thread
-        (callback ?: pendingEnableCallback)?.let { handler.post(it) }
-
-        pendingEnable = false
-        pendingEnableCallback = null // to avoid leaking memory
-    }
-
-    override fun disableHbm(onHbmDisabled: Runnable?) {
-        // If there's a pending enable, clear it and skip the disable request entirely.
-        // Otherwise, HBM will be disabled before the enable - while it's already disabled, which
-        // causes the display HAL call to throw an exception.
-        if (pendingEnable) {
-            pendingEnable = false
-            pendingEnableCallback = null
-            return
-        }
-
-        // Also bail out if HBM is already disabled *and* no enable is pending.
-        // This can happen sometimes if the user spams taps on the UDFPS icon.
-        if (!displayHal.getLhbmState()) {
-            return
-        }
-
-        // Takes 10-20 ms, so switch to background
-        bgExecutor.execute {
-            displayHal?.setLhbmState(false)
-            // Unlock refresh rate
-            handler.post { authController.udfpsHbmListener?.onHbmDisabled(HBM_TYPE, displayId) }
-
-            onHbmDisabled?.let { handler.post(it) }
-        }
-    }
-
-    override fun onDisplayAdded(displayId: Int) = Unit
-    override fun onDisplayRemoved(displayId: Int) = Unit
-    override fun onDisplayChanged(displayId: Int) {
-        // Dispatch pending enable if we were waiting for the refresh rate to change
-        if (pendingEnable && displayId == this.displayId && currentRefreshRate == peakRefreshRate) {
-            doPendingEnable()
-        }
-    }
-
-    override fun binderDied() {
-        displayHal = null
-    }
-
-    companion object {
-        // Descriptor for Pixel display HAL's AIDL service
-        private const val PIXEL_DISPLAY_HAL = "com.google.hardware.pixel.display.IDisplay/default"
-
-        // For simplicity, we only support local HBM as that's the only mode used in production
-        private const val HBM_TYPE = UdfpsHbmTypes.LOCAL_HBM
-    }
-}
-- 
2.17.1


From 73de5cf7ee6b892ac8531b782afebe114feb89fb Mon Sep 17 00:00:00 2001
From: ChonDoit <thphantomblog@gmail.com>
Date: Tue, 16 Aug 2022 00:09:09 +0000
Subject: [PATCH 03/17] Revert "Add show|hide udfps view callbacks to
 IBiometricsFingerprint@2.3 [1/2]"

This reverts commit 8c3fc384fe791ac1d0c600ce5f1d7e1140d3ab86.
---
 .../biometrics/sensors/SensorOverlays.java    | 45 -------------------
 .../hidl/FingerprintAuthenticationClient.java | 12 ++---
 .../hidl/FingerprintDetectClient.java         |  6 +--
 .../sensors/fingerprint/hidl/TestHal.java     |  8 +---
 4 files changed, 10 insertions(+), 61 deletions(-)

diff --git a/services/core/java/com/android/server/biometrics/sensors/SensorOverlays.java b/services/core/java/com/android/server/biometrics/sensors/SensorOverlays.java
index 666f6aa27bb8..008717899aba 100644
--- a/services/core/java/com/android/server/biometrics/sensors/SensorOverlays.java
+++ b/services/core/java/com/android/server/biometrics/sensors/SensorOverlays.java
@@ -18,7 +18,6 @@ package com.android.server.biometrics.sensors;
 
 import android.annotation.NonNull;
 import android.annotation.Nullable;
-import android.hardware.biometrics.fingerprint.V2_1.IBiometricsFingerprint;
 import android.hardware.biometrics.BiometricOverlayConstants;
 import android.hardware.fingerprint.ISidefpsController;
 import android.hardware.fingerprint.IUdfpsOverlayController;
@@ -67,12 +66,6 @@ public final class SensorOverlays {
      */
     public void show(int sensorId, @BiometricOverlayConstants.ShowReason int reason,
             @NonNull AcquisitionClient<?> client) {
-        show(null, sensorId, reason, client);
-    }
-
-    public void show(IBiometricsFingerprint daemon,
-            int sensorId, @BiometricOverlayConstants.ShowReason int reason,
-            @NonNull AcquisitionClient<?> client) {
         if (mSidefpsController.isPresent()) {
             try {
                 mSidefpsController.get().show(sensorId, reason);
@@ -90,23 +83,6 @@ public final class SensorOverlays {
                         }
                     };
 
-            if (daemon != null) {
-                android.hardware.biometrics.fingerprint.V2_3.IBiometricsFingerprint extension =
-                    android.hardware.biometrics.fingerprint.V2_3.IBiometricsFingerprint.castFrom(
-                    daemon);
-                if (extension != null) {
-                    try {
-                        extension.onShowUdfpsOverlay();
-                    } catch (RemoteException e) {
-                        Slog.v(TAG, "showUdfpsOverlay | RemoteException: ", e);
-                    }
-                } else {
-                    Slog.v(TAG, "onShowUdfpsOverlay | failed to cast the HIDL to V2_3");
-                }
-            } else {
-                 Slog.v(TAG, "onShowUdfpsOverlay | daemon null");
-            }
-
             try {
                 mUdfpsOverlayController.get().showUdfpsOverlay(sensorId, reason, callback);
             } catch (RemoteException e) {
@@ -121,10 +97,6 @@ public final class SensorOverlays {
      * @param sensorId sensor id
      */
     public void hide(int sensorId) {
-        hide(null, sensorId);
-    }
-
-    public void hide(IBiometricsFingerprint daemon, int sensorId) {
         if (mSidefpsController.isPresent()) {
             try {
                 mSidefpsController.get().hide(sensorId);
@@ -134,23 +106,6 @@ public final class SensorOverlays {
         }
 
         if (mUdfpsOverlayController.isPresent()) {
-            if (daemon != null) {
-                android.hardware.biometrics.fingerprint.V2_3.IBiometricsFingerprint extension =
-                    android.hardware.biometrics.fingerprint.V2_3.IBiometricsFingerprint.castFrom(
-                    daemon);
-                if (extension != null) {
-                    try {
-                        extension.onHideUdfpsOverlay();
-                    } catch (RemoteException e) {
-                        Slog.v(TAG, "hideUdfpsOverlay | RemoteException: ", e);
-                    }
-                } else {
-                    Slog.v(TAG, "onHideUdfpsOverlay | failed to cast the HIDL to V2_3");
-                }
-            } else {
-                Slog.v(TAG, "onHideUdfpsOverlay | daemon null");
-            }
-
             try {
                 mUdfpsOverlayController.get().hideUdfpsOverlay(sensorId);
             } catch (RemoteException e) {
diff --git a/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/FingerprintAuthenticationClient.java b/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/FingerprintAuthenticationClient.java
index 5b8cb7c0fc46..c2d2e813cc1e 100644
--- a/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/FingerprintAuthenticationClient.java
+++ b/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/FingerprintAuthenticationClient.java
@@ -123,7 +123,7 @@ class FingerprintAuthenticationClient extends AuthenticationClient<IBiometricsFi
         if (authenticated) {
             mState = STATE_STOPPED;
             resetFailedAttempts(getTargetUserId());
-            mSensorOverlays.hide(getFreshDaemon(), getSensorId());
+            mSensorOverlays.hide(getSensorId());
         } else {
             mState = STATE_STARTED_PAUSED_ATTEMPTED;
             final @LockoutTracker.LockoutMode int lockoutMode =
@@ -136,7 +136,7 @@ class FingerprintAuthenticationClient extends AuthenticationClient<IBiometricsFi
                 // Send the error, but do not invoke the FinishCallback yet. Since lockout is not
                 // controlled by the HAL, the framework must stop the sensor before finishing the
                 // client.
-                mSensorOverlays.hide(getFreshDaemon(), getSensorId());
+                mSensorOverlays.hide(getSensorId());
                 onErrorInternal(errorCode, 0 /* vendorCode */, false /* finish */);
                 cancel();
             }
@@ -151,7 +151,7 @@ class FingerprintAuthenticationClient extends AuthenticationClient<IBiometricsFi
             BiometricNotificationUtils.showBadCalibrationNotification(getContext());
         }
 
-        mSensorOverlays.hide(getFreshDaemon(), getSensorId());
+        mSensorOverlays.hide(getSensorId());
     }
 
     private void resetFailedAttempts(int userId) {
@@ -179,7 +179,7 @@ class FingerprintAuthenticationClient extends AuthenticationClient<IBiometricsFi
 
     @Override
     protected void startHalOperation() {
-        mSensorOverlays.show(getFreshDaemon(), getSensorId(), getShowOverlayReason(), this);
+        mSensorOverlays.show(getSensorId(), getShowOverlayReason(), this);
 
         try {
             // GroupId was never used. In fact, groupId is always the same as userId.
@@ -188,14 +188,14 @@ class FingerprintAuthenticationClient extends AuthenticationClient<IBiometricsFi
             Slog.e(TAG, "Remote exception when requesting auth", e);
             onError(BiometricFingerprintConstants.FINGERPRINT_ERROR_HW_UNAVAILABLE,
                     0 /* vendorCode */);
-            mSensorOverlays.hide(getFreshDaemon(), getSensorId());
+            mSensorOverlays.hide(getSensorId());
             mCallback.onClientFinished(this, false /* success */);
         }
     }
 
     @Override
     protected void stopHalOperation() {
-        mSensorOverlays.hide(getFreshDaemon(), getSensorId());
+        mSensorOverlays.hide(getSensorId());
 
         try {
             getFreshDaemon().cancel();
diff --git a/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/FingerprintDetectClient.java b/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/FingerprintDetectClient.java
index ddf941c23576..b854fb300ece 100644
--- a/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/FingerprintDetectClient.java
+++ b/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/FingerprintDetectClient.java
@@ -69,7 +69,7 @@ class FingerprintDetectClient extends AcquisitionClient<IBiometricsFingerprint>
 
     @Override
     protected void stopHalOperation() {
-        mSensorOverlays.hide(getFreshDaemon(), getSensorId());
+        mSensorOverlays.hide(getSensorId());
 
         try {
             getFreshDaemon().cancel();
@@ -89,7 +89,7 @@ class FingerprintDetectClient extends AcquisitionClient<IBiometricsFingerprint>
 
     @Override
     protected void startHalOperation() {
-        mSensorOverlays.show(getFreshDaemon(), getSensorId(), BiometricOverlayConstants.REASON_AUTH_KEYGUARD, this);
+        mSensorOverlays.show(getSensorId(), BiometricOverlayConstants.REASON_AUTH_KEYGUARD, this);
 
         try {
             getFreshDaemon().authenticate(0 /* operationId */, getTargetUserId());
@@ -97,7 +97,7 @@ class FingerprintDetectClient extends AcquisitionClient<IBiometricsFingerprint>
             Slog.e(TAG, "Remote exception when requesting auth", e);
             onError(BiometricFingerprintConstants.FINGERPRINT_ERROR_HW_UNAVAILABLE,
                     0 /* vendorCode */);
-            mSensorOverlays.hide(getFreshDaemon(), getSensorId());
+            mSensorOverlays.hide(getSensorId());
             mCallback.onClientFinished(this, false /* success */);
         }
     }
diff --git a/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/TestHal.java b/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/TestHal.java
index 713e2b726c04..986e92e244f0 100644
--- a/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/TestHal.java
+++ b/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/TestHal.java
@@ -63,12 +63,6 @@ public class TestHal extends IBiometricsFingerprint.Stub {
 
     }
 
-    @Override
-    public void onShowUdfpsOverlay() {}
-
-    @Override
-    public void onHideUdfpsOverlay() {}
-
     @Override
     public long setNotify(IBiometricsFingerprintClientCallback clientCallback) {
         mCallback = clientCallback;
@@ -144,4 +138,4 @@ public class TestHal extends IBiometricsFingerprint.Stub {
         Slog.w(TAG, "Authenticate");
         return 0;
     }
-}
+}
\ No newline at end of file
-- 
2.17.1


From 8df1d9853bdab3f20e0a5747ebb82472679ac490 Mon Sep 17 00:00:00 2001
From: ChonDoit <thphantomblog@gmail.com>
Date: Tue, 16 Aug 2022 00:09:22 +0000
Subject: [PATCH 04/17] Revert "AuthService: Add support for workaround side
 fps props"

This reverts commit 542e07ec351a7c6c2d355c9faddbb46f985403ad.
---
 .../com/android/server/biometrics/AuthService.java    | 11 -----------
 .../sensors/fingerprint/aidl/FingerprintProvider.java | 10 ++++------
 2 files changed, 4 insertions(+), 17 deletions(-)

diff --git a/services/core/java/com/android/server/biometrics/AuthService.java b/services/core/java/com/android/server/biometrics/AuthService.java
index 16a4e106a2e2..9c8ccd946b7f 100644
--- a/services/core/java/com/android/server/biometrics/AuthService.java
+++ b/services/core/java/com/android/server/biometrics/AuthService.java
@@ -31,8 +31,6 @@ import static android.hardware.biometrics.BiometricAuthenticator.TYPE_NONE;
 import static android.hardware.biometrics.BiometricConstants.BIOMETRIC_ERROR_CANCELED;
 import static android.hardware.biometrics.BiometricManager.Authenticators;
 
-import static com.android.server.biometrics.sensors.fingerprint.aidl.FingerprintProvider.getWorkaroundSensorProps;
-
 import android.annotation.NonNull;
 import android.annotation.Nullable;
 import android.app.AppOpsManager;
@@ -744,10 +742,6 @@ public class AuthService extends SystemService {
         final int[] udfpsProps = getContext().getResources().getIntArray(
                 com.android.internal.R.array.config_udfps_sensor_props);
 
-        // Non-empty workaroundLocations indicates that the sensor is SFPS.
-        final List<SensorLocationInternal> workaroundLocations =
-                getWorkaroundSensorProps(getContext());
-
         final boolean isUdfps = !ArrayUtils.isEmpty(udfpsProps);
 
         // config_is_powerbutton_fps indicates whether device has a power button fingerprint sensor.
@@ -776,11 +770,6 @@ public class AuthService extends SystemService {
                     componentInfo, sensorType, resetLockoutRequiresHardwareAuthToken,
                     List.of(new SensorLocationInternal("" /* display */,
                             udfpsProps[0], udfpsProps[1], udfpsProps[2])));
-        } else if (!workaroundLocations.isEmpty()) {
-            return new FingerprintSensorPropertiesInternal(sensorId,
-                    Utils.authenticatorStrengthToPropertyStrength(strength), maxEnrollmentsPerUser,
-                    componentInfo, sensorType, resetLockoutRequiresHardwareAuthToken,
-                    workaroundLocations);
         } else {
             return new FingerprintSensorPropertiesInternal(sensorId,
                     Utils.authenticatorStrengthToPropertyStrength(strength), maxEnrollmentsPerUser,
diff --git a/services/core/java/com/android/server/biometrics/sensors/fingerprint/aidl/FingerprintProvider.java b/services/core/java/com/android/server/biometrics/sensors/fingerprint/aidl/FingerprintProvider.java
index 4b3cf4b1c657..e8fde1d38aa2 100644
--- a/services/core/java/com/android/server/biometrics/sensors/fingerprint/aidl/FingerprintProvider.java
+++ b/services/core/java/com/android/server/biometrics/sensors/fingerprint/aidl/FingerprintProvider.java
@@ -81,8 +81,6 @@ import java.util.concurrent.atomic.AtomicLong;
 @SuppressWarnings("deprecation")
 public class FingerprintProvider implements IBinder.DeathRecipient, ServiceProvider {
 
-    private static final String TAG = "FingerprintProvider";
-
     private boolean mTestHalEnabled;
 
     @NonNull private final Context mContext;
@@ -185,7 +183,7 @@ public class FingerprintProvider implements IBinder.DeathRecipient, ServiceProvi
     }
 
     private String getTag() {
-        return TAG + "/" + mHalInstanceName;
+        return "FingerprintProvider/" + mHalInstanceName;
     }
 
     boolean hasHalInstance() {
@@ -663,7 +661,7 @@ public class FingerprintProvider implements IBinder.DeathRecipient, ServiceProvi
     // TODO(b/174868353): workaround for gaps in HAL interface (remove and get directly from HAL)
     // reads values via an overlay instead of querying the HAL
     @NonNull
-    public static List<SensorLocationInternal> getWorkaroundSensorProps(@NonNull Context context) {
+    private List<SensorLocationInternal> getWorkaroundSensorProps(@NonNull Context context) {
         final List<SensorLocationInternal> sensorLocations = new ArrayList<>();
 
         final TypedArray sfpsProps = context.getResources().obtainTypedArray(
@@ -684,7 +682,7 @@ public class FingerprintProvider implements IBinder.DeathRecipient, ServiceProvi
     }
 
     @Nullable
-    private static SensorLocationInternal parseSensorLocation(@Nullable TypedArray array) {
+    private SensorLocationInternal parseSensorLocation(@Nullable TypedArray array) {
         if (array == null) {
             return null;
         }
@@ -696,7 +694,7 @@ public class FingerprintProvider implements IBinder.DeathRecipient, ServiceProvi
                     array.getInt(2, 0),
                     array.getInt(3, 0));
         } catch (Exception e) {
-            Slog.w(TAG, "malformed sensor location", e);
+            Slog.w(getTag(), "malformed sensor location", e);
         }
         return null;
     }
-- 
2.17.1


From 823035942677525eb2c2ee192a633075f7c98e14 Mon Sep 17 00:00:00 2001
From: ChonDoit <thphantomblog@gmail.com>
Date: Tue, 16 Aug 2022 00:10:58 +0000
Subject: [PATCH 05/17] Revert "base: Custom(User Selected) UDFPS Icon [1/2]"

This reverts commit 8d7c863120411a6c006fe4cec16fc1c4b6a72908.
---
 core/java/android/provider/Settings.java      | 10 ---
 .../systemui/biometrics/UdfpsController.java  |  1 +
 .../systemui/biometrics/UdfpsDrawable.java    | 69 +------------------
 .../biometrics/UdfpsKeyguardView.java         | 19 +----
 4 files changed, 5 insertions(+), 94 deletions(-)

diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index 9ce3bdcc7fb4..31c50e167d01 100644
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -6240,11 +6240,6 @@ public final class Settings {
          */
         public static final String UDFPS_ICON = "udfps_icon";
 		
-		/**
-         * @hide
-         */
-        public static final String OMNI_CUSTOM_FP_ICON_ENABLED = "custom_fp_icon_enabled";
-
         /**
          * boolean value. toggles using arrow key locations on nav bar
          * as left and right dpad keys
@@ -6382,11 +6377,6 @@ public final class Settings {
         public static final String RIGHT_VERTICAL_BACK_SWIPE_APP_ACTIVITY_ACTION = "right_vertical_back_swipe_app_activity_action";
 
 
-        /**
-         * @hide
-         */
-        public static final String OMNI_CUSTOM_FP_ICON = "custom_fingerprint_icon";
-		
 		/**
          * Which Vibration Pattern to use
          * 0: dzzz-dzzz
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
index a2b5ec662970..644b2f378eeb 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
@@ -687,6 +687,7 @@ public class UdfpsController implements DozeReceiver, UdfpsHbmProvider {
         if (CherishUtils.isPackageInstalled(mContext, "com.cherish.udfps.resources")) {
             mUdfpsAnimation = new UdfpsAnimation(mContext, mWindowManager, mSensorProps);
         }
+    }
 
         mUdfpsVendorCode = mContext.getResources().getInteger(R.integer.config_udfps_vendor_code);
         mSystemSettings = systemSettings;
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsDrawable.java b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsDrawable.java
index e7dac7acef93..7bdddce2e1f4 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsDrawable.java
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsDrawable.java
@@ -19,9 +19,6 @@ package com.android.systemui.biometrics;
 import android.content.Context;
 import android.content.res.Resources;
 import android.content.pm.PackageManager;
-import android.graphics.Bitmap;
-import android.graphics.BitmapFactory;
-import android.graphics.drawable.BitmapDrawable;
 import android.graphics.ColorFilter;
 import android.graphics.Paint;
 import android.graphics.Rect;
@@ -29,13 +26,7 @@ import android.graphics.RectF;
 import android.graphics.drawable.Drawable;
 import android.graphics.drawable.ShapeDrawable;
 import android.graphics.drawable.shapes.PathShape;
-import android.net.Uri;
-import android.os.Handler;
-import android.os.ParcelFileDescriptor;
-import android.os.RemoteException;
-import android.os.UserHandle;
 import android.provider.Settings;
-import android.text.TextUtils;
 import android.util.PathParser;
 
 import androidx.annotation.NonNull;
@@ -47,15 +38,6 @@ import com.android.systemui.Dependency;
 import com.android.systemui.R;
 import com.android.systemui.tuner.TunerService;
 
-import java.io.File;
-import java.io.FileDescriptor;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.PrintWriter;
-import java.util.ArrayList;
-import java.util.List;
-
 /**
  * Abstract base class for drawable displayed when the finger is not touching the
  * sensor area.
@@ -73,7 +55,6 @@ public abstract class UdfpsDrawable extends Drawable {
     private boolean mIlluminationShowing;
 
     int mSelectedIcon = 0;
-    private boolean mCustomFpIconEnabled;
 
     int mAlpha = 255; // 0 - 255
 
@@ -96,7 +77,7 @@ public abstract class UdfpsDrawable extends Drawable {
         init();
     }
 
-    /**void init() {
+    void init() {
         if (CherishUtils.isPackageInstalled(mContext, udfpsResourcesPackage)) {
             try {
                 PackageManager pm = mContext.getPackageManager();
@@ -120,54 +101,6 @@ public abstract class UdfpsDrawable extends Drawable {
             Dependency.get(TunerService.class).addTunable(tunable, UDFPS_ICON);
         }
     }
-*/
-    void init() {
-        mCustomFpIconEnabled = Settings.System.getInt(mContext.getContentResolver(),
-                Settings.System.OMNI_CUSTOM_FP_ICON_ENABLED, 0) == 1;
-
-        final String customIconURI = Settings.System.getStringForUser(mContext.getContentResolver(),
-                Settings.System.OMNI_CUSTOM_FP_ICON,
-                UserHandle.USER_CURRENT);
-
-        if (CherishUtils.isPackageInstalled(mContext, udfpsResourcesPackage)) {
-            try {
-                PackageManager pm = mContext.getPackageManager();
-                udfpsRes = pm.getResourcesForApplication(udfpsResourcesPackage);
-            } catch (PackageManager.NameNotFoundException e) {
-                e.printStackTrace();
-            }
-
-            int res = udfpsRes.getIdentifier("udfps_icons",
-                    "array", udfpsResourcesPackage);
-            mUdfpsIcons = udfpsRes.getStringArray(res);
-
-            TunerService.Tunable tunable = (key, newValue) -> {
-                if (UDFPS_ICON.equals(key)) {
-                    mSelectedIcon = newValue == null ? 0 : Integer.parseInt(newValue);
-                }
-            };
-            Dependency.get(TunerService.class).addTunable(tunable, UDFPS_ICON);
-        }
-        if (!TextUtils.isEmpty(customIconURI) && mCustomFpIconEnabled) {
-            try {
-                ParcelFileDescriptor parcelFileDescriptor =
-                    mContext.getContentResolver().openFileDescriptor(Uri.parse(customIconURI), "r");
-                FileDescriptor fileDescriptor = parcelFileDescriptor.getFileDescriptor();
-                Bitmap image = BitmapFactory.decodeFileDescriptor(fileDescriptor);
-                parcelFileDescriptor.close();
-                mUdfpsDrawable = new BitmapDrawable(mContext.getResources(), image);
-            }
-            catch (Exception e) {
-                mUdfpsDrawable = mSelectedIcon == 0 ? null :
-                        loadDrawable(udfpsRes,
-                                mUdfpsIcons[mSelectedIcon]);
-            }
-        } else {
-            mUdfpsDrawable = mSelectedIcon == 0 ? null :
-                    loadDrawable(udfpsRes,
-                            mUdfpsIcons[mSelectedIcon]);
-        }
-    }
 
     void setStrokeWidth(float strokeWidth) {
         mPaint.setStrokeWidth(strokeWidth);
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsKeyguardView.java b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsKeyguardView.java
index 9e54613aad28..206a83d28598 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsKeyguardView.java
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsKeyguardView.java
@@ -26,11 +26,9 @@ import android.animation.ObjectAnimator;
 import android.content.Context;
 import android.graphics.PorterDuff;
 import android.graphics.PorterDuffColorFilter;
-import android.os.UserHandle;
 import android.provider.Settings;
 import android.util.AttributeSet;
 import android.util.MathUtils;
-import android.text.TextUtils;
 import android.view.View;
 import android.widget.ImageView;
 
@@ -73,8 +71,6 @@ public class UdfpsKeyguardView extends UdfpsAnimationView {
     private float mInterpolatedDarkAmount;
 
     private boolean mCustomUdfpsIcon;
-    private boolean mCustomFpIconEnabled;
-    private String customIconURI;
 
     public UdfpsKeyguardView(Context context, @Nullable AttributeSet attrs) {
         super(context, attrs);
@@ -128,14 +124,7 @@ public class UdfpsKeyguardView extends UdfpsAnimationView {
                 Settings.System.UDFPS_ICON, 0) != 0
                 && CherishUtils.isPackageInstalled(mContext,
                 "com.cherish.udfps.resources");
-        mCustomFpIconEnabled = Settings.System.getInt(mContext.getContentResolver(),
-                Settings.System.OMNI_CUSTOM_FP_ICON_ENABLED, 0) == 1;
-        customIconURI = Settings.System.getStringForUser(getContext().getContentResolver(),
-                Settings.System.OMNI_CUSTOM_FP_ICON,
-                UserHandle.USER_CURRENT);
-
-        mBgProtection.setImageDrawable(mCustomUdfpsIcon ||
-                                      (!TextUtils.isEmpty(customIconURI) && mCustomFpIconEnabled)
+        mBgProtection.setImageDrawable(mCustomUdfpsIcon
                 ? mFingerprintDrawable :
                 getContext().getDrawable(R.drawable.fingerprint_bg));
     }
@@ -157,8 +146,7 @@ public class UdfpsKeyguardView extends UdfpsAnimationView {
         mLockScreenFp.setTranslationX(mBurnInOffsetX);
         mLockScreenFp.setTranslationY(mBurnInOffsetY);
         mLockScreenFp.setProgress(1f - mInterpolatedDarkAmount);
-        mLockScreenFp.setAlpha(mCustomUdfpsIcon ||
-                  (!TextUtils.isEmpty(customIconURI) && mCustomFpIconEnabled) ? 0.0f
+        mLockScreenFp.setAlpha(mCustomUdfpsIcon ? 0.0f
                 : (1f - mInterpolatedDarkAmount) * 255);
     }
 
@@ -194,8 +182,7 @@ public class UdfpsKeyguardView extends UdfpsAnimationView {
     @Override
     protected int updateAlpha() {
         int alpha = super.updateAlpha();
-        mLockScreenFp.setAlpha(mCustomUdfpsIcon ||
-              (!TextUtils.isEmpty(customIconURI) && mCustomFpIconEnabled) ? 0.0f : alpha / 255f);
+        mLockScreenFp.setAlpha(mCustomUdfpsIcon ? 0.0f : alpha / 255f);
         if (mInterpolatedDarkAmount != 0f) {
             mBgProtection.setAlpha(1f - mInterpolatedDarkAmount);
         } else {
-- 
2.17.1


From 86735d946ba54d5525f6df26a2d50584f3694d86 Mon Sep 17 00:00:00 2001
From: ChonDoit <thphantomblog@gmail.com>
Date: Tue, 16 Aug 2022 00:12:07 +0000
Subject: [PATCH 06/17] Revert "Make Udfps haptic feedback optional [1/2]"

This reverts commit ec26cf87a4bb1691daee5421a2f08d891469ebcc.
---
 core/java/android/provider/Settings.java                   | 7 -------
 .../com/android/systemui/biometrics/UdfpsController.java   | 4 +---
 2 files changed, 1 insertion(+), 10 deletions(-)

diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index 31c50e167d01..28e239fd2277 100644
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -6223,13 +6223,6 @@ public final class Settings {
          */
         public static final String UDFPS_ANIM = "udfps_anim";
 
-        /**
-
-         * Whether to play haptic feedback when touching udfps icon
-         * @hide
-         */
-        public static final String UDFPS_HAPTIC_FEEDBACK = "udfps_haptic_feedback";
-
         /**
          * @hide
          */
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
index 644b2f378eeb..32c84c7ac54e 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
@@ -713,9 +713,7 @@ public class UdfpsController implements DozeReceiver, UdfpsHbmProvider {
      */
     @VisibleForTesting
     public void playStartHaptic() {
-        boolean vibrate = Settings.System.getInt(mContext.getContentResolver(),
-                Settings.System.UDFPS_HAPTIC_FEEDBACK, 1) == 1;
-        if (mVibrator != null && vibrate) {
+        if (mVibrator != null) {
             mVibrator.vibrate(
                     Process.myUid(),
                     mContext.getOpPackageName(),
-- 
2.17.1


From 68bed8a4e0615902ceb3bf128f98cc379ae2c77a Mon Sep 17 00:00:00 2001
From: ChonDoit <thphantomblog@gmail.com>
Date: Tue, 16 Aug 2022 00:13:31 +0000
Subject: [PATCH 07/17] Revert "Bring back UDFPS icons and animations [1/3]"

This reverts commit 4b834b870bc466eb9b9d9dce0b921fee571072d6.
---
 core/java/android/provider/Settings.java      |  15 --
 .../SystemUI/res/values/custom_dimens.xml     |   4 -
 .../biometrics/AuthRippleController.kt        |  10 +-
 .../systemui/biometrics/UdfpsAnimation.java   | 184 ------------------
 .../systemui/biometrics/UdfpsController.java  |  21 --
 .../systemui/biometrics/UdfpsDrawable.java    |  63 +-----
 .../biometrics/UdfpsEnrollDrawable.java       |   5 -
 .../systemui/biometrics/UdfpsFpDrawable.java  |  28 ---
 .../biometrics/UdfpsKeyguardView.java         |  23 +--
 9 files changed, 6 insertions(+), 347 deletions(-)
 delete mode 100644 packages/SystemUI/src/com/android/systemui/biometrics/UdfpsAnimation.java

diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index 28e239fd2277..3b11a8750ffc 100644
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -6218,21 +6218,6 @@ public final class Settings {
          */
         public static final String QS_FOOTER_DATA_USAGE = "qs_footer_data_usage";
 		
-		/**
-         * @hide
-         */
-        public static final String UDFPS_ANIM = "udfps_anim";
-
-        /**
-         * @hide
-         */
-        public static final String UDFPS_ANIM_STYLE = "udfps_anim_style";
-
-        /**
-         * @hide
-         */
-        public static final String UDFPS_ICON = "udfps_icon";
-		
         /**
          * boolean value. toggles using arrow key locations on nav bar
          * as left and right dpad keys
diff --git a/packages/SystemUI/res/values/custom_dimens.xml b/packages/SystemUI/res/values/custom_dimens.xml
index 3960dedfb699..b1fae76f4cca 100644
--- a/packages/SystemUI/res/values/custom_dimens.xml
+++ b/packages/SystemUI/res/values/custom_dimens.xml
@@ -56,8 +56,4 @@
     
     <!-- QQS Brightness slider -->
     <dimen name="quick_qs_brightness_margin_top">24dp</dimen>
-
-    <!-- Udfps fingerprint animation -->
-    <dimen name="udfps_animation_size">280dp</dimen>
-    <dimen name="udfps_animation_offset">0dp</dimen>
 </resources>
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/AuthRippleController.kt b/packages/SystemUI/src/com/android/systemui/biometrics/AuthRippleController.kt
index e5a3c33960a3..7fab86714472 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/AuthRippleController.kt
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/AuthRippleController.kt
@@ -294,17 +294,11 @@ class AuthRippleController @Inject constructor(
                 }
 
                 mView.setFingerprintSensorLocation(fingerprintSensorLocation!!, udfpsRadius)
-                if (Settings.System.getInt(sysuiContext.contentResolver,
-                       Settings.System.UDFPS_ANIM, 0) == 0) {
-                    showDwellRipple()
-                }
+                showDwellRipple()
             }
 
             override fun onFingerUp() {
-                if (Settings.System.getInt(sysuiContext.contentResolver,
-                        Settings.System.UDFPS_ANIM, 0) == 0) {
-                    mView.retractRipple()
-                }
+                mView.retractRipple()
             }
         }
 
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsAnimation.java b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsAnimation.java
deleted file mode 100644
index c858e658f4d3..000000000000
--- a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsAnimation.java
+++ /dev/null
@@ -1,184 +0,0 @@
-/**
- * Copyright (C) 2019 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.systemui.biometrics;
-
-import static com.android.systemui.doze.util.BurnInHelperKt.getBurnInOffset;
-import static com.android.systemui.doze.util.BurnInHelperKt.getBurnInProgressOffset;
-
-import android.content.Context;
-import android.content.pm.PackageManager;
-import android.content.res.Resources;
-import android.graphics.PixelFormat;
-import android.graphics.drawable.AnimationDrawable;
-import android.hardware.fingerprint.FingerprintSensorPropertiesInternal;
-import android.provider.Settings;
-import android.util.AttributeSet;
-import android.util.Log;
-import android.util.MathUtils;
-import android.view.Gravity;
-import android.view.View;
-import android.view.WindowManager;
-import android.widget.ImageView;
-
-import com.android.systemui.Dependency;
-import com.android.systemui.R;
-import com.android.systemui.plugins.statusbar.StatusBarStateController;
-import com.android.systemui.tuner.TunerService;
-
-public class UdfpsAnimation extends ImageView {
-
-    private static final boolean DEBUG = true;
-    private static final String LOG_TAG = "UdfpsAnimations";
-
-    private static final String UDFPS_ANIM =
-            "system:" + Settings.System.UDFPS_ANIM;
-    private static final String UDFPS_ANIM_STYLE =
-            "system:" + Settings.System.UDFPS_ANIM_STYLE;
-
-    private boolean mShowing = false;
-    private Context mContext;
-    private int mAnimationSize;
-    private int mAnimationOffset;
-    private AnimationDrawable recognizingAnim;
-
-    private final WindowManager.LayoutParams mAnimParams = new WindowManager.LayoutParams();
-    private WindowManager mWindowManager;
-
-    private boolean mIsKeyguard;
-    private boolean mEnabled;
-
-    private final int mMaxBurnInOffsetX;
-    private final int mMaxBurnInOffsetY;
-
-    private int mSelectedAnim;
-    private String[] mStyleNames;
-
-    private final String mUdfpsAnimationPackage;
-
-    private Resources mApkResources;
-
-    public UdfpsAnimation(Context context, WindowManager windowManager,
-            FingerprintSensorPropertiesInternal props) {
-        super(context);
-        mContext = context;
-
-        mWindowManager = windowManager;
-
-        mMaxBurnInOffsetX = context.getResources()
-            .getDimensionPixelSize(R.dimen.udfps_burn_in_offset_x);
-        mMaxBurnInOffsetY = context.getResources()
-            .getDimensionPixelSize(R.dimen.udfps_burn_in_offset_y);
-
-        mUdfpsAnimationPackage = "com.cherish.udfps.resources";
-
-        mAnimationSize = mContext.getResources().getDimensionPixelSize(R.dimen.udfps_animation_size);
-        mAnimationOffset = mContext.getResources().getDimensionPixelSize(R.dimen.udfps_animation_offset);
-
-        mAnimParams.height = mAnimationSize;
-        mAnimParams.width = mAnimationSize;
-
-        mAnimParams.format = PixelFormat.TRANSLUCENT;
-        mAnimParams.type = WindowManager.LayoutParams.TYPE_VOLUME_OVERLAY; // it must be behind Udfps icon
-        mAnimParams.flags =  WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE
-                | WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL
-                | WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS;
-        mAnimParams.gravity = Gravity.TOP | Gravity.CENTER;
-        mAnimParams.y = props.getLocation().sensorLocationY - props.getLocation().sensorRadius
-                - (mAnimationSize / 2) + mAnimationOffset;
-
-        try {
-            PackageManager pm = mContext.getPackageManager();
-            mApkResources = pm.getResourcesForApplication(mUdfpsAnimationPackage);
-        } catch (PackageManager.NameNotFoundException e) {
-            e.printStackTrace();
-        }
-        int res = mApkResources.getIdentifier("udfps_animation_styles",
-                "array", mUdfpsAnimationPackage);
-        mStyleNames = mApkResources.getStringArray(res);
-
-        setScaleType(ImageView.ScaleType.CENTER_INSIDE);
-        TunerService.Tunable tunable = (key, newValue) -> {
-            switch (key) {
-                case UDFPS_ANIM:
-                    mEnabled = TunerService.parseIntegerSwitch(newValue, false);
-                    break;
-                case UDFPS_ANIM_STYLE:
-                    mSelectedAnim = newValue == null ? 0 : Integer.parseInt(newValue);
-                    updateAnimationStyle(mStyleNames[mSelectedAnim]);
-                    break;
-            }
-        };
-        Dependency.get(TunerService.class).addTunable(tunable, UDFPS_ANIM, UDFPS_ANIM_STYLE);
-    }
-
-    private void updateAnimationStyle(String drawableName) {
-        if (DEBUG) Log.i(LOG_TAG, "Updating animation style to:" + drawableName);
-        int resId = mApkResources.getIdentifier(drawableName, "drawable", mUdfpsAnimationPackage);
-        if (DEBUG) Log.i(LOG_TAG, "Got resource id: "+ resId +" from package" );
-        setBackgroundDrawable(mApkResources.getDrawable(resId));
-        recognizingAnim = (AnimationDrawable) getBackground();
-    }
-
-    public void show() {
-        if (!mShowing && mIsKeyguard && mEnabled) {
-            mShowing = true;
-            try {
-                if (getWindowToken() == null) {
-                    mWindowManager.addView(this, mAnimParams);
-                } else {
-                    mWindowManager.updateViewLayout(this, mAnimParams);
-                }
-            } catch (RuntimeException e) {
-                // Ignore
-            }
-            if (recognizingAnim != null) {
-                recognizingAnim.start();
-            }
-        }
-    }
-
-    public void hide() {
-        if (mShowing) {
-            mShowing = false;
-            if (recognizingAnim != null) {
-                clearAnimation();
-                recognizingAnim.stop();
-                recognizingAnim.selectDrawable(0);
-            }
-            if (getWindowToken() != null) {
-                mWindowManager.removeView(this);
-            }
-        }
-    }
-
-    public void setIsKeyguard(boolean isKeyguard) {
-        mIsKeyguard = isKeyguard;
-    }
-
-    public void dozeTimeTick() {
-        float amt = Dependency.get(StatusBarStateController.class).getDozeAmount();
-
-        float mBurnInOffsetX = MathUtils.lerp(0f,
-                getBurnInOffset(mMaxBurnInOffsetX * 2, true /* xAxis */)
-                - mMaxBurnInOffsetX, amt);
-        float mBurnInOffsetY = MathUtils.lerp(0f,
-                getBurnInOffset(mMaxBurnInOffsetY * 2, false /* xAxis */)
-                - mMaxBurnInOffsetY, amt);
-        setTranslationX(mBurnInOffsetX);
-        setTranslationY(mBurnInOffsetY);
-    }
-}
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
index 32c84c7ac54e..410fd81f0cce 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
@@ -63,7 +63,6 @@ import android.view.WindowManager;
 import android.view.accessibility.AccessibilityManager;
 
 import com.android.internal.annotations.VisibleForTesting;
-import com.android.internal.util.cherish.CherishUtils;
 import com.android.keyguard.KeyguardUpdateMonitor;
 import com.android.systemui.R;
 import com.android.systemui.biometrics.UdfpsHbmTypes.HbmType;
@@ -176,12 +175,9 @@ public class UdfpsController implements DozeReceiver, UdfpsHbmProvider {
     private boolean mAttemptedToDismissKeyguard;
     private final int mUdfpsVendorCode;
     private Set<Callback> mCallbacks = new HashSet<>();
-
     private final SystemSettings mSystemSettings;
     private boolean mScreenOffFod;
 
-    private UdfpsAnimation mUdfpsAnimation;
-
     @VisibleForTesting
     public static final AudioAttributes VIBRATION_SONIFICATION_ATTRIBUTES =
             new AudioAttributes.Builder()
@@ -684,11 +680,6 @@ public class UdfpsController implements DozeReceiver, UdfpsHbmProvider {
 
         udfpsHapticsSimulator.setUdfpsController(this);
 
-        if (CherishUtils.isPackageInstalled(mContext, "com.cherish.udfps.resources")) {
-            mUdfpsAnimation = new UdfpsAnimation(mContext, mWindowManager, mSensorProps);
-        }
-    }
-
         mUdfpsVendorCode = mContext.getResources().getInteger(R.integer.config_udfps_vendor_code);
         mSystemSettings = systemSettings;
         updateScreenOffFodState();
@@ -860,12 +851,6 @@ public class UdfpsController implements DozeReceiver, UdfpsHbmProvider {
         mExecution.assertIsMainThread();
 
         final int reason = request.mRequestReason;
-
-        if (mUdfpsAnimation != null) {
-            mUdfpsAnimation.setIsKeyguard(reason ==
-                    BiometricOverlayConstants.REASON_AUTH_KEYGUARD);
-        }
-
         if (mView == null) {
             try {
                 Log.v(TAG, "showUdfpsOverlay | adding window reason=" + reason);
@@ -1098,9 +1083,6 @@ public class UdfpsController implements DozeReceiver, UdfpsHbmProvider {
         for (Callback cb : mCallbacks) {
             cb.onFingerDown();
         }
-        if (mUdfpsAnimation != null) {
-            mUdfpsAnimation.show();
-        }
     }
 
     private void onFingerUp() {
@@ -1117,9 +1099,6 @@ public class UdfpsController implements DozeReceiver, UdfpsHbmProvider {
                 cb.onFingerUp();
             }
         }
-        if (mUdfpsAnimation != null) {
-            mUdfpsAnimation.hide();
-        }
         mOnFingerDown = false;
         if (mView.isIlluminationRequested()) {
             mView.stopIllumination();
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsDrawable.java b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsDrawable.java
index 7bdddce2e1f4..55ed5aaff958 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsDrawable.java
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsDrawable.java
@@ -17,8 +17,6 @@
 package com.android.systemui.biometrics;
 
 import android.content.Context;
-import android.content.res.Resources;
-import android.content.pm.PackageManager;
 import android.graphics.ColorFilter;
 import android.graphics.Paint;
 import android.graphics.Rect;
@@ -26,17 +24,12 @@ import android.graphics.RectF;
 import android.graphics.drawable.Drawable;
 import android.graphics.drawable.ShapeDrawable;
 import android.graphics.drawable.shapes.PathShape;
-import android.provider.Settings;
 import android.util.PathParser;
 
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 
-import com.android.internal.util.cherish.CherishUtils;
-
-import com.android.systemui.Dependency;
 import com.android.systemui.R;
-import com.android.systemui.tuner.TunerService;
 
 /**
  * Abstract base class for drawable displayed when the finger is not touching the
@@ -45,23 +38,12 @@ import com.android.systemui.tuner.TunerService;
 public abstract class UdfpsDrawable extends Drawable {
     static final float DEFAULT_STROKE_WIDTH = 3f;
 
-    static final String UDFPS_ICON = "system:" + Settings.System.UDFPS_ICON;
-
-    String udfpsResourcesPackage = "com.cherish.udfps.resources";
-
     @NonNull final Context mContext;
     @NonNull final ShapeDrawable mFingerprintDrawable;
     private final Paint mPaint;
     private boolean mIlluminationShowing;
 
-    int mSelectedIcon = 0;
-
     int mAlpha = 255; // 0 - 255
-
-    Drawable mUdfpsDrawable;
-    Resources udfpsRes;
-    String[] mUdfpsIcons;
-
     public UdfpsDrawable(@NonNull Context context) {
         mContext = context;
         final String fpPath = context.getResources().getString(R.string.config_udfpsIcon);
@@ -73,33 +55,6 @@ public abstract class UdfpsDrawable extends Drawable {
         mPaint.setStyle(Paint.Style.STROKE);
         mPaint.setStrokeCap(Paint.Cap.ROUND);
         setStrokeWidth(DEFAULT_STROKE_WIDTH);
-
-        init();
-    }
-
-    void init() {
-        if (CherishUtils.isPackageInstalled(mContext, udfpsResourcesPackage)) {
-            try {
-                PackageManager pm = mContext.getPackageManager();
-                udfpsRes = pm.getResourcesForApplication(udfpsResourcesPackage);
-            } catch (PackageManager.NameNotFoundException e) {
-                e.printStackTrace();
-            }
-
-            int res = udfpsRes.getIdentifier("udfps_icons",
-                    "array", udfpsResourcesPackage);
-            mUdfpsIcons = udfpsRes.getStringArray(res);
-
-            TunerService.Tunable tunable = (key, newValue) -> {
-                if (UDFPS_ICON.equals(key)) {
-                    mSelectedIcon = newValue == null ? 0 : Integer.parseInt(newValue);
-                    mUdfpsDrawable = mSelectedIcon == 0 ? null :
-                            loadDrawable(udfpsRes,
-                                    mUdfpsIcons[mSelectedIcon]);
-                }
-            };
-            Dependency.get(TunerService.class).addTunable(tunable, UDFPS_ICON);
-        }
     }
 
     void setStrokeWidth(float strokeWidth) {
@@ -111,7 +66,7 @@ public abstract class UdfpsDrawable extends Drawable {
      * @param sensorRect the rect coordinates for the sensor area
      */
     public void onSensorRectUpdated(@NonNull RectF sensorRect) {
-        final int margin =  (int) sensorRect.height() / 16;
+        final int margin =  (int) sensorRect.height() / 8;
 
         final Rect bounds = new Rect((int) sensorRect.left + margin,
                 (int) sensorRect.top + margin,
@@ -125,9 +80,6 @@ public abstract class UdfpsDrawable extends Drawable {
      */
     protected void updateFingerprintIconBounds(@NonNull Rect bounds) {
         mFingerprintDrawable.setBounds(bounds);
-        if (mUdfpsDrawable != null) {
-            mUdfpsDrawable.setBounds(bounds);
-        }
         invalidateSelf();
     }
 
@@ -135,9 +87,6 @@ public abstract class UdfpsDrawable extends Drawable {
     public void setAlpha(int alpha) {
         mAlpha = alpha;
         mFingerprintDrawable.setAlpha(mAlpha);
-        if (mUdfpsDrawable != null) {
-            mUdfpsDrawable.setAlpha(mAlpha);
-        }
         invalidateSelf();
     }
 
@@ -145,16 +94,6 @@ public abstract class UdfpsDrawable extends Drawable {
         return mIlluminationShowing;
     }
 
-    Drawable getUdfpsDrawable() {
-        return mUdfpsDrawable;
-    }
-
-    Drawable loadDrawable(Resources res, String resName) {
-        int resId = res.getIdentifier(resName,
-                "drawable", udfpsResourcesPackage);
-        return res.getDrawable(resId);
-    }
-
     void setIlluminationShowing(boolean showing) {
         if (mIlluminationShowing == showing) {
             return;
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsEnrollDrawable.java b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsEnrollDrawable.java
index c065fc1ad595..9137dca6cc71 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsEnrollDrawable.java
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsEnrollDrawable.java
@@ -408,11 +408,6 @@ public class UdfpsEnrollDrawable extends UdfpsDrawable {
             return;
         }
 
-        if (getUdfpsDrawable() != null) {
-            getUdfpsDrawable().draw(canvas);
-            return;
-        }
-
         // Draw moving target
         if (mEnrollHelper != null && !mEnrollHelper.isCenterEnrollmentStage()) {
             canvas.save();
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsFpDrawable.java b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsFpDrawable.java
index f7081a70552d..09b6fabbdd15 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsFpDrawable.java
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsFpDrawable.java
@@ -18,8 +18,6 @@ package com.android.systemui.biometrics;
 
 import android.content.Context;
 import android.graphics.Canvas;
-import android.graphics.Rect;
-import android.graphics.RectF;
 
 import androidx.annotation.NonNull;
 
@@ -38,32 +36,6 @@ public class UdfpsFpDrawable extends UdfpsDrawable {
             return;
         }
 
-        if (getUdfpsDrawable() != null) {
-            getUdfpsDrawable().draw(canvas);
-            return;
-        }
-
         mFingerprintDrawable.draw(canvas);
     }
-
-    @Override
-    public void onSensorRectUpdated(@NonNull RectF sensorRect) {
-        super.onSensorRectUpdated(sensorRect);
-        final int margin =  (int) sensorRect.height() / 16;
-
-        final Rect bounds = new Rect((int) sensorRect.left + margin,
-                (int) sensorRect.top + margin,
-                (int) sensorRect.right - margin,
-                (int) sensorRect.bottom - margin);
-        updateFingerprintIconBounds(bounds);
-    }
-
-    @Override
-    protected void updateFingerprintIconBounds(@NonNull Rect bounds) {
-        super.updateFingerprintIconBounds(bounds);
-        if (getUdfpsDrawable() != null) {
-            getUdfpsDrawable().setBounds(bounds);
-            invalidateSelf();
-        }
-    }
 }
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsKeyguardView.java b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsKeyguardView.java
index 206a83d28598..9015396d26ab 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsKeyguardView.java
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsKeyguardView.java
@@ -26,7 +26,6 @@ import android.animation.ObjectAnimator;
 import android.content.Context;
 import android.graphics.PorterDuff;
 import android.graphics.PorterDuffColorFilter;
-import android.provider.Settings;
 import android.util.AttributeSet;
 import android.util.MathUtils;
 import android.view.View;
@@ -34,8 +33,6 @@ import android.widget.ImageView;
 
 import androidx.annotation.Nullable;
 
-import com.android.internal.util.cherish.CherishUtils;
-
 import com.android.settingslib.Utils;
 import com.android.systemui.R;
 import com.android.systemui.animation.Interpolators;
@@ -70,8 +67,6 @@ public class UdfpsKeyguardView extends UdfpsAnimationView {
     private float mBurnInProgress;
     private float mInterpolatedDarkAmount;
 
-    private boolean mCustomUdfpsIcon;
-
     public UdfpsKeyguardView(Context context, @Nullable AttributeSet attrs) {
         super(context, attrs);
         mFingerprintDrawable = new UdfpsFpDrawable(context);
@@ -96,8 +91,6 @@ public class UdfpsKeyguardView extends UdfpsAnimationView {
                 new KeyPath("**"), LottieProperty.COLOR_FILTER,
                 frameInfo -> new PorterDuffColorFilter(mTextColorPrimary, PorterDuff.Mode.SRC_ATOP)
         );
-
-        updateIcon();
     }
 
     @Override
@@ -119,16 +112,6 @@ public class UdfpsKeyguardView extends UdfpsAnimationView {
         return true;
     }
 
-    private void updateIcon() {
-        mCustomUdfpsIcon = Settings.System.getInt(mContext.getContentResolver(),
-                Settings.System.UDFPS_ICON, 0) != 0
-                && CherishUtils.isPackageInstalled(mContext,
-                "com.cherish.udfps.resources");
-        mBgProtection.setImageDrawable(mCustomUdfpsIcon
-                ? mFingerprintDrawable :
-                getContext().getDrawable(R.drawable.fingerprint_bg));
-    }
-
     private void updateBurnInOffsets() {
         mBurnInOffsetX = MathUtils.lerp(0f,
             getBurnInOffset(mMaxBurnInOffsetX * 2, true /* xAxis */)
@@ -146,8 +129,7 @@ public class UdfpsKeyguardView extends UdfpsAnimationView {
         mLockScreenFp.setTranslationX(mBurnInOffsetX);
         mLockScreenFp.setTranslationY(mBurnInOffsetY);
         mLockScreenFp.setProgress(1f - mInterpolatedDarkAmount);
-        mLockScreenFp.setAlpha(mCustomUdfpsIcon ? 0.0f
-                : (1f - mInterpolatedDarkAmount) * 255);
+        mLockScreenFp.setAlpha((1f - mInterpolatedDarkAmount) * 255);
     }
 
     void requestUdfps(boolean request, int color) {
@@ -161,6 +143,7 @@ public class UdfpsKeyguardView extends UdfpsAnimationView {
     void updateColor() {
         mTextColorPrimary = Utils.getColorAttrDefaultColor(mContext,
             android.R.attr.textColorPrimary);
+        mBgProtection.setImageDrawable(getContext().getDrawable(R.drawable.fingerprint_bg));
         mLockScreenFp.invalidate(); // updated with a valueCallback
     }
 
@@ -182,7 +165,7 @@ public class UdfpsKeyguardView extends UdfpsAnimationView {
     @Override
     protected int updateAlpha() {
         int alpha = super.updateAlpha();
-        mLockScreenFp.setAlpha(mCustomUdfpsIcon ? 0.0f : alpha / 255f);
+        mLockScreenFp.setAlpha(alpha / 255f);
         if (mInterpolatedDarkAmount != 0f) {
             mBgProtection.setAlpha(1f - mInterpolatedDarkAmount);
         } else {
-- 
2.17.1


From 1c9672c4fa091a26a414bce8b88c0cb3e523b260 Mon Sep 17 00:00:00 2001
From: ChonDoit <thphantomblog@gmail.com>
Date: Tue, 16 Aug 2022 00:16:12 +0000
Subject: [PATCH 08/17] Revert "SystemUI: allow toggling screen off fod[1/2]"

This reverts commit 73259ff4ac974756f6d841d11f15248940c7ed55.
---
 core/java/android/provider/Settings.java      |  7 ----
 .../settings/backup/SystemSettings.java       |  1 -
 .../validators/SystemSettingsValidators.java  |  1 -
 .../systemui/biometrics/UdfpsController.java  | 33 +++----------------
 4 files changed, 4 insertions(+), 38 deletions(-)

diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index 3b11a8750ffc..59de860611be 100644
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -6193,13 +6193,6 @@ public final class Settings {
         @Readable
         public static final String VOLUME_PANEL_ON_LEFT = "volume_panel_on_left";
 		
-		/**
-         * Enable fod detection even when screen is off
-         * Default value is 0
-         * @hide
-         */
-        public static final String SCREEN_OFF_FOD = "screen_off_fod";
-		
 		/**
          * Whether to display QS clock
          * @hide
diff --git a/packages/SettingsProvider/src/android/provider/settings/backup/SystemSettings.java b/packages/SettingsProvider/src/android/provider/settings/backup/SystemSettings.java
index 6def3fd4b344..bd351fae406c 100644
--- a/packages/SettingsProvider/src/android/provider/settings/backup/SystemSettings.java
+++ b/packages/SettingsProvider/src/android/provider/settings/backup/SystemSettings.java
@@ -106,7 +106,6 @@ public class SystemSettings {
         Settings.System.ACCELEROMETER_ROTATION_ANGLES,
         Settings.System.QS_SHOW_BATTERY_ESTIMATE,
         Settings.System.ENABLE_FLOATING_ROTATION_BUTTON,
-        Settings.System.SCREEN_OFF_FOD,
         Settings.System.SCREEN_OFF_ANIMATION,
         Settings.System.NAVIGATION_BAR_INVERSE,
         Settings.System.VOLUME_PANEL_ON_LEFT,
diff --git a/packages/SettingsProvider/src/android/provider/settings/validators/SystemSettingsValidators.java b/packages/SettingsProvider/src/android/provider/settings/validators/SystemSettingsValidators.java
index 02da900a6837..2d616690ca64 100644
--- a/packages/SettingsProvider/src/android/provider/settings/validators/SystemSettingsValidators.java
+++ b/packages/SettingsProvider/src/android/provider/settings/validators/SystemSettingsValidators.java
@@ -222,7 +222,6 @@ public class SystemSettingsValidators {
         VALIDATORS.put(System.ACCELEROMETER_ROTATION_ANGLES, NON_NEGATIVE_INTEGER_VALIDATOR);
         VALIDATORS.put(System.QS_SHOW_BATTERY_ESTIMATE, BOOLEAN_VALIDATOR);
         VALIDATORS.put(System.ENABLE_FLOATING_ROTATION_BUTTON, BOOLEAN_VALIDATOR);
-        VALIDATORS.put(System.SCREEN_OFF_FOD, BOOLEAN_VALIDATOR);
         VALIDATORS.put(System.SCREEN_OFF_ANIMATION, ANY_INTEGER_VALIDATOR);
         VALIDATORS.put(System.NAVIGATION_BAR_INVERSE, BOOLEAN_VALIDATOR);
         VALIDATORS.put(System.VOLUME_PANEL_ON_LEFT, BOOLEAN_VALIDATOR);
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
index 410fd81f0cce..a938f8cedde5 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
@@ -29,7 +29,6 @@ import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
 import android.content.IntentFilter;
-import android.database.ContentObserver;
 import android.graphics.PixelFormat;
 import android.graphics.Point;
 import android.graphics.RectF;
@@ -41,17 +40,14 @@ import android.hardware.fingerprint.FingerprintSensorPropertiesInternal;
 import android.hardware.fingerprint.IUdfpsOverlayController;
 import android.hardware.fingerprint.IUdfpsOverlayControllerCallback;
 import android.media.AudioAttributes;
-import android.net.Uri;
 import android.os.Handler;
 import android.os.PowerManager;
 import android.os.Process;
 import android.os.RemoteException;
 import android.os.Trace;
-import android.os.UserHandle;
 import android.os.VibrationEffect;
 import android.os.Vibrator;
 import android.os.UserHandle;
-import android.provider.Settings;
 import android.util.Log;
 import android.view.Gravity;
 import android.view.LayoutInflater;
@@ -83,7 +79,6 @@ import com.android.systemui.statusbar.policy.ConfigurationController;
 import com.android.systemui.statusbar.policy.KeyguardStateController;
 import com.android.systemui.util.concurrency.DelayableExecutor;
 import com.android.systemui.util.concurrency.Execution;
-import com.android.systemui.util.settings.SystemSettings;
 import com.android.systemui.util.time.SystemClock;
 
 import java.util.HashSet;
@@ -175,8 +170,6 @@ public class UdfpsController implements DozeReceiver, UdfpsHbmProvider {
     private boolean mAttemptedToDismissKeyguard;
     private final int mUdfpsVendorCode;
     private Set<Callback> mCallbacks = new HashSet<>();
-    private final SystemSettings mSystemSettings;
-    private boolean mScreenOffFod;
 
     @VisibleForTesting
     public static final AudioAttributes VIBRATION_SONIFICATION_ATTRIBUTES =
@@ -336,10 +329,8 @@ public class UdfpsController implements DozeReceiver, UdfpsHbmProvider {
         @Override
         public void onAcquired(int sensorId, int acquiredInfo, int vendorCode) {
             mFgExecutor.execute(() -> {
-                final boolean isDozing = mStatusBarStateController.isDozing() || !mScreenOn;
-                if (acquiredInfo == 6 && vendorCode == mUdfpsVendorCode) {
-                    if ((mScreenOffFod && isDozing) /** Screen off and dozing */ ||
-                            (mKeyguardUpdateMonitor.isDreaming() && mScreenOn) /** AOD or pulse */) {
+                if (acquiredInfo == 6 && (mStatusBarStateController.isDozing() || !mScreenOn)) {
+                    if (vendorCode == mUdfpsVendorCode) {
                         if (mContext.getResources().getBoolean(R.bool.config_pulseOnFingerDown)) {
                             mContext.sendBroadcastAsUser(new Intent(PULSE_ACTION),
                                     new UserHandle(UserHandle.USER_CURRENT));
@@ -347,7 +338,7 @@ public class UdfpsController implements DozeReceiver, UdfpsHbmProvider {
                             mPowerManager.wakeUp(mSystemClock.uptimeMillis(),
                                     PowerManager.WAKE_REASON_GESTURE, TAG);
                         }
-                        onAodInterrupt(0, 0, 0, 0);
+                        onAodInterrupt(0, 0, 0, 0); // To-Do pass proper values
                     }
                 }
             });
@@ -617,8 +608,7 @@ public class UdfpsController implements DozeReceiver, UdfpsHbmProvider {
             @NonNull ConfigurationController configurationController,
             @NonNull SystemClock systemClock,
             @NonNull UnlockedScreenOffAnimationController unlockedScreenOffAnimationController,
-            @NonNull SystemUIDialogManager dialogManager,
-            @NonNull SystemSettings systemSettings) {
+            @NonNull SystemUIDialogManager dialogManager) {
         mContext = context;
         mExecution = execution;
         mMainHandler = mainHandler;
@@ -681,22 +671,7 @@ public class UdfpsController implements DozeReceiver, UdfpsHbmProvider {
         udfpsHapticsSimulator.setUdfpsController(this);
 
         mUdfpsVendorCode = mContext.getResources().getInteger(R.integer.config_udfps_vendor_code);
-        mSystemSettings = systemSettings;
-        updateScreenOffFodState();
-        mSystemSettings.registerContentObserver(Settings.System.SCREEN_OFF_FOD,
-            new ContentObserver(mMainHandler) {
-                @Override
-                public void onChange(boolean selfChange, Uri uri) {
-                    if (uri.getLastPathSegment().equals(Settings.System.SCREEN_OFF_FOD)) {
-                        updateScreenOffFodState();
-                    }
-                }
-            }
-        );
-    }
 
-    private void updateScreenOffFodState() {
-        mScreenOffFod = mSystemSettings.getInt(Settings.System.SCREEN_OFF_FOD, 0) == 1;
     }
 
     /**
-- 
2.17.1


From 31945a2f3e207d2421d8ba41e0aed0627581a270 Mon Sep 17 00:00:00 2001
From: ChonDoit <thphantomblog@gmail.com>
Date: Tue, 16 Aug 2022 00:16:38 +0000
Subject: [PATCH 09/17] Revert "fix-up:udfps: Add support for udfps on aod
 without having dedicated sensor"

This reverts commit f73fc3b0499abe15dc5e9794a5ca9cdd5890bc9f.
---
 .../fingerprint/hidl/FingerprintAuthenticationClient.java       | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/FingerprintAuthenticationClient.java b/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/FingerprintAuthenticationClient.java
index c2d2e813cc1e..eb9b3118b9df 100644
--- a/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/FingerprintAuthenticationClient.java
+++ b/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/FingerprintAuthenticationClient.java
@@ -105,7 +105,7 @@ class FingerprintAuthenticationClient extends AuthenticationClient<IBiometricsFi
     public void onAcquired(int acquiredInfo, int vendorCode) {
         super.onAcquired(acquiredInfo, vendorCode);
         try {
-            mSensorOverlays.ifUdfps(controller -> controller.onAcquired(getSensorId(), acquiredInfo, vendorCode));
+            mUdfpsOverlayController.onAcquired(getSensorId(), acquiredInfo, vendorCode);
         } catch (Exception e) {
         }
     }
-- 
2.17.1


From d76cbbb90accf3f89a0ebf4bbf5b94ce0e9aae86 Mon Sep 17 00:00:00 2001
From: ChonDoit <thphantomblog@gmail.com>
Date: Tue, 16 Aug 2022 00:18:01 +0000
Subject: [PATCH 10/17] Revert "udfps: Allow devices to pulse onFingerDown
 instead of waking the screen"

This reverts commit 69eb06b9fd8f4061ecb70e267506bfd90f950d02.
---
 packages/SystemUI/res/values/cherish_config.xml       |  4 ----
 .../android/systemui/biometrics/UdfpsController.java  | 11 ++---------
 2 files changed, 2 insertions(+), 13 deletions(-)

diff --git a/packages/SystemUI/res/values/cherish_config.xml b/packages/SystemUI/res/values/cherish_config.xml
index fe3253628123..0e2e58c2747d 100644
--- a/packages/SystemUI/res/values/cherish_config.xml
+++ b/packages/SystemUI/res/values/cherish_config.xml
@@ -15,10 +15,6 @@
     <!-- Udfps vendor code -->
     <integer name="config_udfps_vendor_code">0</integer>
 
-    <!-- Whether to pulse onFingerDown actions instead
-        of waking the screen while the screen is off or in lpm. -->
-    <bool name="config_pulseOnFingerDown">false</bool>
-
     <!-- If not zero, limits the internal screen recorder's framerate to the set value. -->
     <integer name="config_screenRecorderMaxFramerate">0</integer>
 
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
index a938f8cedde5..3d0ee52bf08f 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
@@ -47,7 +47,6 @@ import android.os.RemoteException;
 import android.os.Trace;
 import android.os.VibrationEffect;
 import android.os.Vibrator;
-import android.os.UserHandle;
 import android.util.Log;
 import android.view.Gravity;
 import android.view.LayoutInflater;
@@ -104,7 +103,6 @@ import kotlin.Unit;
 @SysUISingleton
 public class UdfpsController implements DozeReceiver, UdfpsHbmProvider {
     private static final String TAG = "UdfpsController";
-    private static final String PULSE_ACTION = "com.android.systemui.doze.pulse";
     private static final long AOD_INTERRUPT_TIMEOUT_MILLIS = 1000;
     private static final long DEFAULT_VIBRATION_DURATION = 1000; // milliseconds
 
@@ -331,13 +329,8 @@ public class UdfpsController implements DozeReceiver, UdfpsHbmProvider {
             mFgExecutor.execute(() -> {
                 if (acquiredInfo == 6 && (mStatusBarStateController.isDozing() || !mScreenOn)) {
                     if (vendorCode == mUdfpsVendorCode) {
-                        if (mContext.getResources().getBoolean(R.bool.config_pulseOnFingerDown)) {
-                            mContext.sendBroadcastAsUser(new Intent(PULSE_ACTION),
-                                    new UserHandle(UserHandle.USER_CURRENT));
-                        } else {
-                            mPowerManager.wakeUp(mSystemClock.uptimeMillis(),
-                                    PowerManager.WAKE_REASON_GESTURE, TAG);
-                        }
+                        mPowerManager.wakeUp(mSystemClock.uptimeMillis(),
+                                PowerManager.WAKE_REASON_GESTURE, TAG);
                         onAodInterrupt(0, 0, 0, 0); // To-Do pass proper values
                     }
                 }
-- 
2.17.1


From 5a40c446262b83e619812fc02d6bd13539384090 Mon Sep 17 00:00:00 2001
From: ChonDoit <thphantomblog@gmail.com>
Date: Tue, 16 Aug 2022 00:19:01 +0000
Subject: [PATCH 11/17] Revert "fwb: Add overlay for udfps vendor code"

This reverts commit b0f6430594bbdd71259323521b8b9e99ccb62d43.
---
 packages/SystemUI/res/values/cherish_config.xml             | 3 ---
 .../com/android/systemui/biometrics/UdfpsController.java    | 6 +-----
 2 files changed, 1 insertion(+), 8 deletions(-)

diff --git a/packages/SystemUI/res/values/cherish_config.xml b/packages/SystemUI/res/values/cherish_config.xml
index 0e2e58c2747d..38a9a4cbd538 100644
--- a/packages/SystemUI/res/values/cherish_config.xml
+++ b/packages/SystemUI/res/values/cherish_config.xml
@@ -12,9 +12,6 @@
     -->
     <integer name="config_udfps_hbm_type">1</integer>
 
-    <!-- Udfps vendor code -->
-    <integer name="config_udfps_vendor_code">0</integer>
-
     <!-- If not zero, limits the internal screen recorder's framerate to the set value. -->
     <integer name="config_screenRecorderMaxFramerate">0</integer>
 
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
index 3d0ee52bf08f..44bd33f0cb12 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
@@ -166,7 +166,6 @@ public class UdfpsController implements DozeReceiver, UdfpsHbmProvider {
     private Runnable mAodInterruptRunnable;
     private boolean mOnFingerDown;
     private boolean mAttemptedToDismissKeyguard;
-    private final int mUdfpsVendorCode;
     private Set<Callback> mCallbacks = new HashSet<>();
 
     @VisibleForTesting
@@ -328,7 +327,7 @@ public class UdfpsController implements DozeReceiver, UdfpsHbmProvider {
         public void onAcquired(int sensorId, int acquiredInfo, int vendorCode) {
             mFgExecutor.execute(() -> {
                 if (acquiredInfo == 6 && (mStatusBarStateController.isDozing() || !mScreenOn)) {
-                    if (vendorCode == mUdfpsVendorCode) {
+                    if (vendorCode == 22) { // Use overlay to determine pressed vendor code?
                         mPowerManager.wakeUp(mSystemClock.uptimeMillis(),
                                 PowerManager.WAKE_REASON_GESTURE, TAG);
                         onAodInterrupt(0, 0, 0, 0); // To-Do pass proper values
@@ -662,9 +661,6 @@ public class UdfpsController implements DozeReceiver, UdfpsHbmProvider {
         context.registerReceiver(mBroadcastReceiver, filter);
 
         udfpsHapticsSimulator.setUdfpsController(this);
-
-        mUdfpsVendorCode = mContext.getResources().getInteger(R.integer.config_udfps_vendor_code);
-
     }
 
     /**
-- 
2.17.1


From aba6c24b6da72e6f42ce3dff322fc190f37b68af Mon Sep 17 00:00:00 2001
From: ChonDoit <thphantomblog@gmail.com>
Date: Tue, 16 Aug 2022 00:20:50 +0000
Subject: [PATCH 12/17] Revert "udfps: change window type to
 TYPE_DISPLAY_OVERLAY"

This reverts commit bd0cd8289a8ae76c40ebd492ff54265b6c4ce4cd.
---
 .../src/com/android/systemui/biometrics/AuthContainerView.java  | 2 +-
 .../src/com/android/systemui/biometrics/UdfpsController.java    | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/AuthContainerView.java b/packages/SystemUI/src/com/android/systemui/biometrics/AuthContainerView.java
index fb5a948c6716..fd37b3509a4e 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/AuthContainerView.java
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/AuthContainerView.java
@@ -793,7 +793,7 @@ public class AuthContainerView extends LinearLayout
         final WindowManager.LayoutParams lp = new WindowManager.LayoutParams(
                 ViewGroup.LayoutParams.MATCH_PARENT,
                 ViewGroup.LayoutParams.MATCH_PARENT,
-                WindowManager.LayoutParams.TYPE_DISPLAY_OVERLAY,
+                WindowManager.LayoutParams.TYPE_STATUS_BAR_SUB_PANEL,
                 windowFlags,
                 PixelFormat.TRANSLUCENT);
         lp.privateFlags |= WindowManager.LayoutParams.SYSTEM_FLAG_SHOW_FOR_ALL_USERS;
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
index 44bd33f0cb12..8bd24186a2ed 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
@@ -644,7 +644,7 @@ public class UdfpsController implements DozeReceiver, UdfpsHbmProvider {
                 });
 
         mCoreLayoutParams = new WindowManager.LayoutParams(
-                WindowManager.LayoutParams.TYPE_DISPLAY_OVERLAY,
+                WindowManager.LayoutParams.TYPE_KEYGUARD_DIALOG,
                 0 /* flags set in computeLayoutParams() */,
                 PixelFormat.TRANSLUCENT);
         mCoreLayoutParams.setTitle(TAG);
-- 
2.17.1


From 67c35db6532f88e57e1817275980c72619b04bcd Mon Sep 17 00:00:00 2001
From: ChonDoit <thphantomblog@gmail.com>
Date: Tue, 16 Aug 2022 00:21:05 +0000
Subject: [PATCH 13/17] Revert "udfps: Implement UdfpsHbmProvider"

This reverts commit c5254b9996ec6c94ed233a02d6d75bec9a945cbc.
---
 .../systemui/biometrics/UdfpsController.java  | 24 ++-----------------
 1 file changed, 2 insertions(+), 22 deletions(-)

diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
index 8bd24186a2ed..b1a445961572 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
@@ -60,7 +60,6 @@ import android.view.accessibility.AccessibilityManager;
 import com.android.internal.annotations.VisibleForTesting;
 import com.android.keyguard.KeyguardUpdateMonitor;
 import com.android.systemui.R;
-import com.android.systemui.biometrics.UdfpsHbmTypes.HbmType;
 import com.android.systemui.dagger.SysUISingleton;
 import com.android.systemui.dagger.qualifiers.Main;
 import com.android.systemui.doze.DozeReceiver;
@@ -101,7 +100,7 @@ import kotlin.Unit;
  */
 @SuppressWarnings("deprecation")
 @SysUISingleton
-public class UdfpsController implements DozeReceiver, UdfpsHbmProvider {
+public class UdfpsController implements DozeReceiver {
     private static final String TAG = "UdfpsController";
     private static final long AOD_INTERRUPT_TIMEOUT_MILLIS = 1000;
     private static final long DEFAULT_VIBRATION_DURATION = 1000; // milliseconds
@@ -123,7 +122,6 @@ public class UdfpsController implements DozeReceiver, UdfpsHbmProvider {
     @NonNull private final SystemUIDialogManager mDialogManager;
     @NonNull private final KeyguardUpdateMonitor mKeyguardUpdateMonitor;
     @Nullable private final Vibrator mVibrator;
-    @NonNull private final Handler mMainHandler;
     @NonNull private final FalsingManager mFalsingManager;
     @NonNull private final PowerManager mPowerManager;
     @NonNull private final AccessibilityManager mAccessibilityManager;
@@ -603,7 +601,6 @@ public class UdfpsController implements DozeReceiver, UdfpsHbmProvider {
             @NonNull SystemUIDialogManager dialogManager) {
         mContext = context;
         mExecution = execution;
-        mMainHandler = mainHandler;
         mVibrator = vibrator;
         mInflater = inflater;
         // The fingerprint manager is queried for UDFPS before this class is constructed, so the
@@ -822,7 +819,7 @@ public class UdfpsController implements DozeReceiver, UdfpsHbmProvider {
                 mView = (UdfpsView) mInflater.inflate(R.layout.udfps_view, null, false);
                 mOnFingerDown = false;
                 mView.setSensorProperties(mSensorProps);
-                mView.setHbmProvider(this);
+                mView.setHbmProvider(mHbmProvider);
                 UdfpsAnimationViewController<?> animation = inflateUdfpsAnimation(reason);
                 mAttemptedToDismissKeyguard = false;
                 if (animation != null) {
@@ -1097,21 +1094,4 @@ public class UdfpsController implements DozeReceiver, UdfpsHbmProvider {
          */
         void onFingerDown();
     }
-
-    @Override
-    public void enableHbm(@HbmType int hbmType, @Nullable Surface surface,
-            @Nullable Runnable onHbmEnabled) {
-        // TO-DO send call to lineage biometric hal and/or add dummy jni that device could override
-        if (onHbmEnabled != null) {
-            mMainHandler.post(onHbmEnabled);
-        }
-    }
-
-    @Override
-    public void disableHbm(@Nullable Runnable onHbmDisabled) {
-        // TO-DO send call to lineage biometric hal and/or add dummy jni that device could override
-        if (onHbmDisabled != null) {
-            mMainHandler.post(onHbmDisabled);
-        }
-    }
 }
-- 
2.17.1


From 4346fdb67d5d0004979828ce3afa356a49f8ea2c Mon Sep 17 00:00:00 2001
From: ChonDoit <thphantomblog@gmail.com>
Date: Tue, 16 Aug 2022 00:22:18 +0000
Subject: [PATCH 14/17] Revert "udfps: Allow to configure hbm overlay type"

This reverts commit dcc5433749174a612b5dfb66ef4f204ad6f0b757.
---
 packages/SystemUI/res/values/cherish_config.xml             | 6 ------
 .../src/com/android/systemui/biometrics/UdfpsView.java      | 3 +--
 2 files changed, 1 insertion(+), 8 deletions(-)

diff --git a/packages/SystemUI/res/values/cherish_config.xml b/packages/SystemUI/res/values/cherish_config.xml
index 38a9a4cbd538..b9183c09f9a5 100644
--- a/packages/SystemUI/res/values/cherish_config.xml
+++ b/packages/SystemUI/res/values/cherish_config.xml
@@ -6,12 +6,6 @@
     <!-- Color of the UDFPS pressed view -->
     <color name="config_udfpsColor">#ffffffff</color>
 
-    <!-- HBM type of UDFPS overlay.
-            0 - GLOBAL HBM
-            1 - LOCAL HBM
-    -->
-    <integer name="config_udfps_hbm_type">1</integer>
-
     <!-- If not zero, limits the internal screen recorder's framerate to the set value. -->
     <integer name="config_screenRecorderMaxFramerate">0</integer>
 
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsView.java b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsView.java
index 11f85f8eb9a5..6d31ef0e7701 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsView.java
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsView.java
@@ -51,7 +51,7 @@ public class UdfpsView extends FrameLayout implements DozeReceiver, UdfpsIllumin
 
     private static final String SETTING_HBM_TYPE =
             "com.android.systemui.biometrics.UdfpsSurfaceView.hbmType";
-    private static @HbmType int DEFAULT_HBM_TYPE;
+    private static final @HbmType int DEFAULT_HBM_TYPE = UdfpsHbmTypes.LOCAL_HBM;
 
     private static final int DEBUG_TEXT_SIZE_PX = 32;
 
@@ -97,7 +97,6 @@ public class UdfpsView extends FrameLayout implements DozeReceiver, UdfpsIllumin
         mOnIlluminatedDelayMs = mContext.getResources().getInteger(
                 com.android.internal.R.integer.config_udfps_illumination_transition_ms);
 
-        DEFAULT_HBM_TYPE = mContext.getResources().getInteger(R.integer.config_udfps_hbm_type);
         if (Build.IS_ENG || Build.IS_USERDEBUG) {
             mHbmType = Settings.Secure.getIntForUser(mContext.getContentResolver(),
                     SETTING_HBM_TYPE, DEFAULT_HBM_TYPE, UserHandle.USER_CURRENT);
-- 
2.17.1


From 399b9a23abb388e92e66b078fce07ed54a007437 Mon Sep 17 00:00:00 2001
From: ChonDoit <thphantomblog@gmail.com>
Date: Tue, 16 Aug 2022 00:23:01 +0000
Subject: [PATCH 15/17] Revert "Udfps: Make pressed udfp view configurable"

This reverts commit 38423fa82f7161042898e961c4dda1a6d38a57b4.
---
 .../res/drawable-nodpi/udfps_icon_pressed.png   | Bin 108 -> 0 bytes
 packages/SystemUI/res/values/cherish_config.xml |   3 ---
 .../systemui/biometrics/UdfpsSurfaceView.java   |  16 +---------------
 3 files changed, 1 insertion(+), 18 deletions(-)
 delete mode 100644 packages/SystemUI/res/drawable-nodpi/udfps_icon_pressed.png

diff --git a/packages/SystemUI/res/drawable-nodpi/udfps_icon_pressed.png b/packages/SystemUI/res/drawable-nodpi/udfps_icon_pressed.png
deleted file mode 100644
index 4102e28c1300b49323b50625d8cfaa73b006561f..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 108
zcmeAS@N?(olHy`uVBq!ia0vp^j3CUx1|;Q0k8}bl$r9IylHmNblJdl&R0hYC{G?O`
z&)mfH)S%SFl*+=BsWw1Ge4Z|jAr-fh5*U~o7?>FtSQ!{^cTT<plwt66^>bP0l+XkK
D@OB!I

diff --git a/packages/SystemUI/res/values/cherish_config.xml b/packages/SystemUI/res/values/cherish_config.xml
index b9183c09f9a5..5aefe3aad31f 100644
--- a/packages/SystemUI/res/values/cherish_config.xml
+++ b/packages/SystemUI/res/values/cherish_config.xml
@@ -3,9 +3,6 @@
     <integer name="config_maxVisibleNotificationIcons">4</integer>
     <integer name="config_maxVisibleNotificationIconsOnLock">5</integer>
 
-    <!-- Color of the UDFPS pressed view -->
-    <color name="config_udfpsColor">#ffffffff</color>
-
     <!-- If not zero, limits the internal screen recorder's framerate to the set value. -->
     <integer name="config_screenRecorderMaxFramerate">0</integer>
 
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsSurfaceView.java b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsSurfaceView.java
index 71e33a699934..77fad35d32d4 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsSurfaceView.java
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsSurfaceView.java
@@ -19,7 +19,6 @@ package com.android.systemui.biometrics;
 import android.annotation.NonNull;
 import android.annotation.Nullable;
 import android.content.Context;
-import android.graphics.drawable.Drawable;
 import android.graphics.Canvas;
 import android.graphics.Paint;
 import android.graphics.PixelFormat;
@@ -30,8 +29,6 @@ import android.view.Surface;
 import android.view.SurfaceHolder;
 import android.view.SurfaceView;
 
-import com.android.systemui.R;
-
 /**
  * Surface View for providing the Global High-Brightness Mode (GHBM) illumination for UDFPS.
  */
@@ -57,8 +54,6 @@ public class UdfpsSurfaceView extends SurfaceView implements SurfaceHolder.Callb
     boolean mAwaitingSurfaceToStartIllumination;
     boolean mHasValidSurface;
 
-    private Drawable mUdfpsIconPressed;
-
     public UdfpsSurfaceView(Context context, AttributeSet attrs) {
         super(context, attrs);
 
@@ -74,10 +69,8 @@ public class UdfpsSurfaceView extends SurfaceView implements SurfaceHolder.Callb
 
         mSensorPaint = new Paint(0 /* flags */);
         mSensorPaint.setAntiAlias(true);
-        mSensorPaint.setColor(context.getColor(R.color.config_udfpsColor));
+        mSensorPaint.setARGB(255, 255, 255, 255);
         mSensorPaint.setStyle(Paint.Style.FILL);
-
-        mUdfpsIconPressed = context.getDrawable(R.drawable.udfps_icon_pressed);
     }
 
     @Override public void surfaceCreated(SurfaceHolder holder) {
@@ -141,13 +134,6 @@ public class UdfpsSurfaceView extends SurfaceView implements SurfaceHolder.Callb
         Canvas canvas = null;
         try {
             canvas = mHolder.lockCanvas();
-            mUdfpsIconPressed.setBounds(
-                    Math.round(sensorRect.left),
-                    Math.round(sensorRect.top),
-                    Math.round(sensorRect.right),
-                    Math.round(sensorRect.bottom)
-            );
-            mUdfpsIconPressed.draw(canvas);
             canvas.drawOval(sensorRect, mSensorPaint);
         } finally {
             // Make sure the surface is never left in a bad state.
-- 
2.17.1


From ff14eb2f00c4292eb13e1d59556f00391ed58fcc Mon Sep 17 00:00:00 2001
From: ChonDoit <thphantomblog@gmail.com>
Date: Tue, 16 Aug 2022 00:23:18 +0000
Subject: [PATCH 16/17] Revert "udfps: Add support for udfps on aod without
 having dedicated sensor"

This reverts commit ff10fd60950efe0b01124eb3dbbe6bb695b8084b.
---
 .../fingerprint/IUdfpsOverlayController.aidl        |  3 ---
 .../systemui/biometrics/UdfpsController.java        | 13 -------------
 .../hidl/FingerprintAuthenticationClient.java       |  9 ---------
 3 files changed, 25 deletions(-)

diff --git a/core/java/android/hardware/fingerprint/IUdfpsOverlayController.aidl b/core/java/android/hardware/fingerprint/IUdfpsOverlayController.aidl
index f5d9a76e50e3..648edda62171 100644
--- a/core/java/android/hardware/fingerprint/IUdfpsOverlayController.aidl
+++ b/core/java/android/hardware/fingerprint/IUdfpsOverlayController.aidl
@@ -40,7 +40,4 @@ oneway interface IUdfpsOverlayController {
 
     // Shows debug messages on the UDFPS overlay.
     void setDebugMessage(int sensorId, String message);
-
-    // Useful for Legacy devices not having dedicated aod sensor
-    void onAcquired(int sensorId, int acquiredInfo, int vendorCode);
 }
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
index b1a445961572..fbd39be8fbec 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
@@ -320,19 +320,6 @@ public class UdfpsController implements DozeReceiver {
                 mView.setDebugMessage(message);
             });
         }
-
-        @Override
-        public void onAcquired(int sensorId, int acquiredInfo, int vendorCode) {
-            mFgExecutor.execute(() -> {
-                if (acquiredInfo == 6 && (mStatusBarStateController.isDozing() || !mScreenOn)) {
-                    if (vendorCode == 22) { // Use overlay to determine pressed vendor code?
-                        mPowerManager.wakeUp(mSystemClock.uptimeMillis(),
-                                PowerManager.WAKE_REASON_GESTURE, TAG);
-                        onAodInterrupt(0, 0, 0, 0); // To-Do pass proper values
-                    }
-                }
-            });
-        }
     }
 
     /**
diff --git a/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/FingerprintAuthenticationClient.java b/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/FingerprintAuthenticationClient.java
index eb9b3118b9df..3058e2508f5f 100644
--- a/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/FingerprintAuthenticationClient.java
+++ b/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/FingerprintAuthenticationClient.java
@@ -101,15 +101,6 @@ class FingerprintAuthenticationClient extends AuthenticationClient<IBiometricsFi
         return new CompositeCallback(mALSProbeCallback, callback);
     }
 
-    @Override
-    public void onAcquired(int acquiredInfo, int vendorCode) {
-        super.onAcquired(acquiredInfo, vendorCode);
-        try {
-            mUdfpsOverlayController.onAcquired(getSensorId(), acquiredInfo, vendorCode);
-        } catch (Exception e) {
-        }
-    }
-
     @Override
     public void onAuthenticated(BiometricAuthenticator.Identifier identifier,
             boolean authenticated, ArrayList<Byte> token) {
-- 
2.17.1


From 4118dc3454623f111c7d95526640d8cb5534b081 Mon Sep 17 00:00:00 2001
From: ChonDoit <thphantomblog@gmail.com>
Date: Tue, 16 Aug 2022 00:23:42 +0000
Subject: [PATCH 17/17] Revert "UdfpsController: Call onFingerDown on action
 down events"

This reverts commit 071cd9448f57bd16ef73dc67f43ed820cb08f354.
---
 .../src/com/android/systemui/biometrics/UdfpsController.java | 5 -----
 1 file changed, 5 deletions(-)

diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
index fbd39be8fbec..250c16c81eac 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
@@ -426,12 +426,7 @@ public class UdfpsController implements DozeReceiver {
                     // We need to persist its ID to track it during ACTION_MOVE that could include
                     // data for many other pointers because of multi-touch support.
                     mActivePointerId = event.getPointerId(0);
-                    final int idx = mActivePointerId == -1
-                            ? event.getPointerId(0)
-                            : event.findPointerIndex(mActivePointerId);
                     mVelocityTracker.addMovement(event);
-                    onFingerDown((int) event.getRawX(), (int) event.getRawY(),
-                            (int) event.getTouchMinor(idx), (int) event.getTouchMajor(idx));
                     handled = true;
                 }
                 if ((withinSensorArea || fromUdfpsView) && shouldTryToDismissKeyguard()) {
-- 
2.17.1

