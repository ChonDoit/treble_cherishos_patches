From 120bf1986f20f2643ea136625a6bcdcb6467cb82 Mon Sep 17 00:00:00 2001
From: ChonDoit <thphantomblog@gmail.com>
Date: Mon, 11 Jul 2022 23:32:02 +0000
Subject: [PATCH] Revert "Add show|hide udfps view callbacks to
 IBiometricsFingerprint@2.3 [1/2]"

This reverts commit 8c3fc384fe791ac1d0c600ce5f1d7e1140d3ab86.
---
 .../biometrics/sensors/SensorOverlays.java    | 45 -------------------
 .../hidl/FingerprintAuthenticationClient.java | 12 ++---
 .../hidl/FingerprintDetectClient.java         |  6 +--
 .../sensors/fingerprint/hidl/TestHal.java     |  8 +---
 4 files changed, 10 insertions(+), 61 deletions(-)

diff --git a/services/core/java/com/android/server/biometrics/sensors/SensorOverlays.java b/services/core/java/com/android/server/biometrics/sensors/SensorOverlays.java
index 666f6aa27bb8..008717899aba 100644
--- a/services/core/java/com/android/server/biometrics/sensors/SensorOverlays.java
+++ b/services/core/java/com/android/server/biometrics/sensors/SensorOverlays.java
@@ -18,7 +18,6 @@ package com.android.server.biometrics.sensors;
 
 import android.annotation.NonNull;
 import android.annotation.Nullable;
-import android.hardware.biometrics.fingerprint.V2_1.IBiometricsFingerprint;
 import android.hardware.biometrics.BiometricOverlayConstants;
 import android.hardware.fingerprint.ISidefpsController;
 import android.hardware.fingerprint.IUdfpsOverlayController;
@@ -67,12 +66,6 @@ public final class SensorOverlays {
      */
     public void show(int sensorId, @BiometricOverlayConstants.ShowReason int reason,
             @NonNull AcquisitionClient<?> client) {
-        show(null, sensorId, reason, client);
-    }
-
-    public void show(IBiometricsFingerprint daemon,
-            int sensorId, @BiometricOverlayConstants.ShowReason int reason,
-            @NonNull AcquisitionClient<?> client) {
         if (mSidefpsController.isPresent()) {
             try {
                 mSidefpsController.get().show(sensorId, reason);
@@ -90,23 +83,6 @@ public final class SensorOverlays {
                         }
                     };
 
-            if (daemon != null) {
-                android.hardware.biometrics.fingerprint.V2_3.IBiometricsFingerprint extension =
-                    android.hardware.biometrics.fingerprint.V2_3.IBiometricsFingerprint.castFrom(
-                    daemon);
-                if (extension != null) {
-                    try {
-                        extension.onShowUdfpsOverlay();
-                    } catch (RemoteException e) {
-                        Slog.v(TAG, "showUdfpsOverlay | RemoteException: ", e);
-                    }
-                } else {
-                    Slog.v(TAG, "onShowUdfpsOverlay | failed to cast the HIDL to V2_3");
-                }
-            } else {
-                 Slog.v(TAG, "onShowUdfpsOverlay | daemon null");
-            }
-
             try {
                 mUdfpsOverlayController.get().showUdfpsOverlay(sensorId, reason, callback);
             } catch (RemoteException e) {
@@ -121,10 +97,6 @@ public final class SensorOverlays {
      * @param sensorId sensor id
      */
     public void hide(int sensorId) {
-        hide(null, sensorId);
-    }
-
-    public void hide(IBiometricsFingerprint daemon, int sensorId) {
         if (mSidefpsController.isPresent()) {
             try {
                 mSidefpsController.get().hide(sensorId);
@@ -134,23 +106,6 @@ public final class SensorOverlays {
         }
 
         if (mUdfpsOverlayController.isPresent()) {
-            if (daemon != null) {
-                android.hardware.biometrics.fingerprint.V2_3.IBiometricsFingerprint extension =
-                    android.hardware.biometrics.fingerprint.V2_3.IBiometricsFingerprint.castFrom(
-                    daemon);
-                if (extension != null) {
-                    try {
-                        extension.onHideUdfpsOverlay();
-                    } catch (RemoteException e) {
-                        Slog.v(TAG, "hideUdfpsOverlay | RemoteException: ", e);
-                    }
-                } else {
-                    Slog.v(TAG, "onHideUdfpsOverlay | failed to cast the HIDL to V2_3");
-                }
-            } else {
-                Slog.v(TAG, "onHideUdfpsOverlay | daemon null");
-            }
-
             try {
                 mUdfpsOverlayController.get().hideUdfpsOverlay(sensorId);
             } catch (RemoteException e) {
diff --git a/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/FingerprintAuthenticationClient.java b/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/FingerprintAuthenticationClient.java
index 5b8cb7c0fc46..c2d2e813cc1e 100644
--- a/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/FingerprintAuthenticationClient.java
+++ b/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/FingerprintAuthenticationClient.java
@@ -123,7 +123,7 @@ class FingerprintAuthenticationClient extends AuthenticationClient<IBiometricsFi
         if (authenticated) {
             mState = STATE_STOPPED;
             resetFailedAttempts(getTargetUserId());
-            mSensorOverlays.hide(getFreshDaemon(), getSensorId());
+            mSensorOverlays.hide(getSensorId());
         } else {
             mState = STATE_STARTED_PAUSED_ATTEMPTED;
             final @LockoutTracker.LockoutMode int lockoutMode =
@@ -136,7 +136,7 @@ class FingerprintAuthenticationClient extends AuthenticationClient<IBiometricsFi
                 // Send the error, but do not invoke the FinishCallback yet. Since lockout is not
                 // controlled by the HAL, the framework must stop the sensor before finishing the
                 // client.
-                mSensorOverlays.hide(getFreshDaemon(), getSensorId());
+                mSensorOverlays.hide(getSensorId());
                 onErrorInternal(errorCode, 0 /* vendorCode */, false /* finish */);
                 cancel();
             }
@@ -151,7 +151,7 @@ class FingerprintAuthenticationClient extends AuthenticationClient<IBiometricsFi
             BiometricNotificationUtils.showBadCalibrationNotification(getContext());
         }
 
-        mSensorOverlays.hide(getFreshDaemon(), getSensorId());
+        mSensorOverlays.hide(getSensorId());
     }
 
     private void resetFailedAttempts(int userId) {
@@ -179,7 +179,7 @@ class FingerprintAuthenticationClient extends AuthenticationClient<IBiometricsFi
 
     @Override
     protected void startHalOperation() {
-        mSensorOverlays.show(getFreshDaemon(), getSensorId(), getShowOverlayReason(), this);
+        mSensorOverlays.show(getSensorId(), getShowOverlayReason(), this);
 
         try {
             // GroupId was never used. In fact, groupId is always the same as userId.
@@ -188,14 +188,14 @@ class FingerprintAuthenticationClient extends AuthenticationClient<IBiometricsFi
             Slog.e(TAG, "Remote exception when requesting auth", e);
             onError(BiometricFingerprintConstants.FINGERPRINT_ERROR_HW_UNAVAILABLE,
                     0 /* vendorCode */);
-            mSensorOverlays.hide(getFreshDaemon(), getSensorId());
+            mSensorOverlays.hide(getSensorId());
             mCallback.onClientFinished(this, false /* success */);
         }
     }
 
     @Override
     protected void stopHalOperation() {
-        mSensorOverlays.hide(getFreshDaemon(), getSensorId());
+        mSensorOverlays.hide(getSensorId());
 
         try {
             getFreshDaemon().cancel();
diff --git a/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/FingerprintDetectClient.java b/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/FingerprintDetectClient.java
index ddf941c23576..b854fb300ece 100644
--- a/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/FingerprintDetectClient.java
+++ b/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/FingerprintDetectClient.java
@@ -69,7 +69,7 @@ class FingerprintDetectClient extends AcquisitionClient<IBiometricsFingerprint>
 
     @Override
     protected void stopHalOperation() {
-        mSensorOverlays.hide(getFreshDaemon(), getSensorId());
+        mSensorOverlays.hide(getSensorId());
 
         try {
             getFreshDaemon().cancel();
@@ -89,7 +89,7 @@ class FingerprintDetectClient extends AcquisitionClient<IBiometricsFingerprint>
 
     @Override
     protected void startHalOperation() {
-        mSensorOverlays.show(getFreshDaemon(), getSensorId(), BiometricOverlayConstants.REASON_AUTH_KEYGUARD, this);
+        mSensorOverlays.show(getSensorId(), BiometricOverlayConstants.REASON_AUTH_KEYGUARD, this);
 
         try {
             getFreshDaemon().authenticate(0 /* operationId */, getTargetUserId());
@@ -97,7 +97,7 @@ class FingerprintDetectClient extends AcquisitionClient<IBiometricsFingerprint>
             Slog.e(TAG, "Remote exception when requesting auth", e);
             onError(BiometricFingerprintConstants.FINGERPRINT_ERROR_HW_UNAVAILABLE,
                     0 /* vendorCode */);
-            mSensorOverlays.hide(getFreshDaemon(), getSensorId());
+            mSensorOverlays.hide(getSensorId());
             mCallback.onClientFinished(this, false /* success */);
         }
     }
diff --git a/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/TestHal.java b/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/TestHal.java
index 713e2b726c04..986e92e244f0 100644
--- a/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/TestHal.java
+++ b/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/TestHal.java
@@ -63,12 +63,6 @@ public class TestHal extends IBiometricsFingerprint.Stub {
 
     }
 
-    @Override
-    public void onShowUdfpsOverlay() {}
-
-    @Override
-    public void onHideUdfpsOverlay() {}
-
     @Override
     public long setNotify(IBiometricsFingerprintClientCallback clientCallback) {
         mCallback = clientCallback;
@@ -144,4 +138,4 @@ public class TestHal extends IBiometricsFingerprint.Stub {
         Slog.w(TAG, "Authenticate");
         return 0;
     }
-}
+}
\ No newline at end of file
-- 
2.17.1

