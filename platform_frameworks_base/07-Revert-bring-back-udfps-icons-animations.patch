From 5b6a0edfa461b8a0182bf38452d91840dd99b4d6 Mon Sep 17 00:00:00 2001
From: ChonDoit <thphantomblog@gmail.com>
Date: Mon, 11 Jul 2022 23:54:40 +0000
Subject: [PATCH] Revert "Bring back UDFPS icons and animations [1/3]"

This reverts commit 4b834b870bc466eb9b9d9dce0b921fee571072d6.
---
 core/java/android/provider/Settings.java      |  15 --
 .../SystemUI/res/values/custom_dimens.xml     |   4 -
 .../biometrics/AuthRippleController.kt        |  10 +-
 .../systemui/biometrics/UdfpsAnimation.java   | 184 ------------------
 .../systemui/biometrics/UdfpsController.java  |  21 --
 .../systemui/biometrics/UdfpsDrawable.java    |  63 +-----
 .../biometrics/UdfpsEnrollDrawable.java       |   5 -
 .../systemui/biometrics/UdfpsFpDrawable.java  |  28 ---
 .../biometrics/UdfpsKeyguardView.java         |  23 +--
 9 files changed, 6 insertions(+), 347 deletions(-)
 delete mode 100644 packages/SystemUI/src/com/android/systemui/biometrics/UdfpsAnimation.java

diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index b5bf24785e11..f8ef7e746b6d 100644
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -6208,21 +6208,6 @@ public final class Settings {
          */
         public static final String QS_FOOTER_DATA_USAGE = "qs_footer_data_usage";
 		
-		/**
-         * @hide
-         */
-        public static final String UDFPS_ANIM = "udfps_anim";
-
-        /**
-         * @hide
-         */
-        public static final String UDFPS_ANIM_STYLE = "udfps_anim_style";
-
-        /**
-         * @hide
-         */
-        public static final String UDFPS_ICON = "udfps_icon";
-		
         /**
          * boolean value. toggles using arrow key locations on nav bar
          * as left and right dpad keys
diff --git a/packages/SystemUI/res/values/custom_dimens.xml b/packages/SystemUI/res/values/custom_dimens.xml
index 3960dedfb699..b1fae76f4cca 100644
--- a/packages/SystemUI/res/values/custom_dimens.xml
+++ b/packages/SystemUI/res/values/custom_dimens.xml
@@ -56,8 +56,4 @@
     
     <!-- QQS Brightness slider -->
     <dimen name="quick_qs_brightness_margin_top">24dp</dimen>
-
-    <!-- Udfps fingerprint animation -->
-    <dimen name="udfps_animation_size">280dp</dimen>
-    <dimen name="udfps_animation_offset">0dp</dimen>
 </resources>
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/AuthRippleController.kt b/packages/SystemUI/src/com/android/systemui/biometrics/AuthRippleController.kt
index 6a8afcaa6b3f..f5715416691c 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/AuthRippleController.kt
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/AuthRippleController.kt
@@ -297,17 +297,11 @@ class AuthRippleController @Inject constructor(
                 }
 
                 mView.setFingerprintSensorLocation(fingerprintSensorLocation!!, udfpsRadius)
-                if (Settings.System.getInt(sysuiContext.contentResolver,
-                       Settings.System.UDFPS_ANIM, 0) == 0) {
-                    showDwellRipple()
-                }
+                showDwellRipple()
             }
 
             override fun onFingerUp() {
-                if (Settings.System.getInt(sysuiContext.contentResolver,
-                        Settings.System.UDFPS_ANIM, 0) == 0) {
-                    mView.retractRipple()
-                }
+                mView.retractRipple()
             }
         }
 
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsAnimation.java b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsAnimation.java
deleted file mode 100644
index c858e658f4d3..000000000000
--- a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsAnimation.java
+++ /dev/null
@@ -1,184 +0,0 @@
-/**
- * Copyright (C) 2019 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.systemui.biometrics;
-
-import static com.android.systemui.doze.util.BurnInHelperKt.getBurnInOffset;
-import static com.android.systemui.doze.util.BurnInHelperKt.getBurnInProgressOffset;
-
-import android.content.Context;
-import android.content.pm.PackageManager;
-import android.content.res.Resources;
-import android.graphics.PixelFormat;
-import android.graphics.drawable.AnimationDrawable;
-import android.hardware.fingerprint.FingerprintSensorPropertiesInternal;
-import android.provider.Settings;
-import android.util.AttributeSet;
-import android.util.Log;
-import android.util.MathUtils;
-import android.view.Gravity;
-import android.view.View;
-import android.view.WindowManager;
-import android.widget.ImageView;
-
-import com.android.systemui.Dependency;
-import com.android.systemui.R;
-import com.android.systemui.plugins.statusbar.StatusBarStateController;
-import com.android.systemui.tuner.TunerService;
-
-public class UdfpsAnimation extends ImageView {
-
-    private static final boolean DEBUG = true;
-    private static final String LOG_TAG = "UdfpsAnimations";
-
-    private static final String UDFPS_ANIM =
-            "system:" + Settings.System.UDFPS_ANIM;
-    private static final String UDFPS_ANIM_STYLE =
-            "system:" + Settings.System.UDFPS_ANIM_STYLE;
-
-    private boolean mShowing = false;
-    private Context mContext;
-    private int mAnimationSize;
-    private int mAnimationOffset;
-    private AnimationDrawable recognizingAnim;
-
-    private final WindowManager.LayoutParams mAnimParams = new WindowManager.LayoutParams();
-    private WindowManager mWindowManager;
-
-    private boolean mIsKeyguard;
-    private boolean mEnabled;
-
-    private final int mMaxBurnInOffsetX;
-    private final int mMaxBurnInOffsetY;
-
-    private int mSelectedAnim;
-    private String[] mStyleNames;
-
-    private final String mUdfpsAnimationPackage;
-
-    private Resources mApkResources;
-
-    public UdfpsAnimation(Context context, WindowManager windowManager,
-            FingerprintSensorPropertiesInternal props) {
-        super(context);
-        mContext = context;
-
-        mWindowManager = windowManager;
-
-        mMaxBurnInOffsetX = context.getResources()
-            .getDimensionPixelSize(R.dimen.udfps_burn_in_offset_x);
-        mMaxBurnInOffsetY = context.getResources()
-            .getDimensionPixelSize(R.dimen.udfps_burn_in_offset_y);
-
-        mUdfpsAnimationPackage = "com.cherish.udfps.resources";
-
-        mAnimationSize = mContext.getResources().getDimensionPixelSize(R.dimen.udfps_animation_size);
-        mAnimationOffset = mContext.getResources().getDimensionPixelSize(R.dimen.udfps_animation_offset);
-
-        mAnimParams.height = mAnimationSize;
-        mAnimParams.width = mAnimationSize;
-
-        mAnimParams.format = PixelFormat.TRANSLUCENT;
-        mAnimParams.type = WindowManager.LayoutParams.TYPE_VOLUME_OVERLAY; // it must be behind Udfps icon
-        mAnimParams.flags =  WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE
-                | WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL
-                | WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS;
-        mAnimParams.gravity = Gravity.TOP | Gravity.CENTER;
-        mAnimParams.y = props.getLocation().sensorLocationY - props.getLocation().sensorRadius
-                - (mAnimationSize / 2) + mAnimationOffset;
-
-        try {
-            PackageManager pm = mContext.getPackageManager();
-            mApkResources = pm.getResourcesForApplication(mUdfpsAnimationPackage);
-        } catch (PackageManager.NameNotFoundException e) {
-            e.printStackTrace();
-        }
-        int res = mApkResources.getIdentifier("udfps_animation_styles",
-                "array", mUdfpsAnimationPackage);
-        mStyleNames = mApkResources.getStringArray(res);
-
-        setScaleType(ImageView.ScaleType.CENTER_INSIDE);
-        TunerService.Tunable tunable = (key, newValue) -> {
-            switch (key) {
-                case UDFPS_ANIM:
-                    mEnabled = TunerService.parseIntegerSwitch(newValue, false);
-                    break;
-                case UDFPS_ANIM_STYLE:
-                    mSelectedAnim = newValue == null ? 0 : Integer.parseInt(newValue);
-                    updateAnimationStyle(mStyleNames[mSelectedAnim]);
-                    break;
-            }
-        };
-        Dependency.get(TunerService.class).addTunable(tunable, UDFPS_ANIM, UDFPS_ANIM_STYLE);
-    }
-
-    private void updateAnimationStyle(String drawableName) {
-        if (DEBUG) Log.i(LOG_TAG, "Updating animation style to:" + drawableName);
-        int resId = mApkResources.getIdentifier(drawableName, "drawable", mUdfpsAnimationPackage);
-        if (DEBUG) Log.i(LOG_TAG, "Got resource id: "+ resId +" from package" );
-        setBackgroundDrawable(mApkResources.getDrawable(resId));
-        recognizingAnim = (AnimationDrawable) getBackground();
-    }
-
-    public void show() {
-        if (!mShowing && mIsKeyguard && mEnabled) {
-            mShowing = true;
-            try {
-                if (getWindowToken() == null) {
-                    mWindowManager.addView(this, mAnimParams);
-                } else {
-                    mWindowManager.updateViewLayout(this, mAnimParams);
-                }
-            } catch (RuntimeException e) {
-                // Ignore
-            }
-            if (recognizingAnim != null) {
-                recognizingAnim.start();
-            }
-        }
-    }
-
-    public void hide() {
-        if (mShowing) {
-            mShowing = false;
-            if (recognizingAnim != null) {
-                clearAnimation();
-                recognizingAnim.stop();
-                recognizingAnim.selectDrawable(0);
-            }
-            if (getWindowToken() != null) {
-                mWindowManager.removeView(this);
-            }
-        }
-    }
-
-    public void setIsKeyguard(boolean isKeyguard) {
-        mIsKeyguard = isKeyguard;
-    }
-
-    public void dozeTimeTick() {
-        float amt = Dependency.get(StatusBarStateController.class).getDozeAmount();
-
-        float mBurnInOffsetX = MathUtils.lerp(0f,
-                getBurnInOffset(mMaxBurnInOffsetX * 2, true /* xAxis */)
-                - mMaxBurnInOffsetX, amt);
-        float mBurnInOffsetY = MathUtils.lerp(0f,
-                getBurnInOffset(mMaxBurnInOffsetY * 2, false /* xAxis */)
-                - mMaxBurnInOffsetY, amt);
-        setTranslationX(mBurnInOffsetX);
-        setTranslationY(mBurnInOffsetY);
-    }
-}
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
index 32c84c7ac54e..410fd81f0cce 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
@@ -63,7 +63,6 @@ import android.view.WindowManager;
 import android.view.accessibility.AccessibilityManager;
 
 import com.android.internal.annotations.VisibleForTesting;
-import com.android.internal.util.cherish.CherishUtils;
 import com.android.keyguard.KeyguardUpdateMonitor;
 import com.android.systemui.R;
 import com.android.systemui.biometrics.UdfpsHbmTypes.HbmType;
@@ -176,12 +175,9 @@ public class UdfpsController implements DozeReceiver, UdfpsHbmProvider {
     private boolean mAttemptedToDismissKeyguard;
     private final int mUdfpsVendorCode;
     private Set<Callback> mCallbacks = new HashSet<>();
-
     private final SystemSettings mSystemSettings;
     private boolean mScreenOffFod;
 
-    private UdfpsAnimation mUdfpsAnimation;
-
     @VisibleForTesting
     public static final AudioAttributes VIBRATION_SONIFICATION_ATTRIBUTES =
             new AudioAttributes.Builder()
@@ -684,11 +680,6 @@ public class UdfpsController implements DozeReceiver, UdfpsHbmProvider {
 
         udfpsHapticsSimulator.setUdfpsController(this);
 
-        if (CherishUtils.isPackageInstalled(mContext, "com.cherish.udfps.resources")) {
-            mUdfpsAnimation = new UdfpsAnimation(mContext, mWindowManager, mSensorProps);
-        }
-    }
-
         mUdfpsVendorCode = mContext.getResources().getInteger(R.integer.config_udfps_vendor_code);
         mSystemSettings = systemSettings;
         updateScreenOffFodState();
@@ -860,12 +851,6 @@ public class UdfpsController implements DozeReceiver, UdfpsHbmProvider {
         mExecution.assertIsMainThread();
 
         final int reason = request.mRequestReason;
-
-        if (mUdfpsAnimation != null) {
-            mUdfpsAnimation.setIsKeyguard(reason ==
-                    BiometricOverlayConstants.REASON_AUTH_KEYGUARD);
-        }
-
         if (mView == null) {
             try {
                 Log.v(TAG, "showUdfpsOverlay | adding window reason=" + reason);
@@ -1098,9 +1083,6 @@ public class UdfpsController implements DozeReceiver, UdfpsHbmProvider {
         for (Callback cb : mCallbacks) {
             cb.onFingerDown();
         }
-        if (mUdfpsAnimation != null) {
-            mUdfpsAnimation.show();
-        }
     }
 
     private void onFingerUp() {
@@ -1117,9 +1099,6 @@ public class UdfpsController implements DozeReceiver, UdfpsHbmProvider {
                 cb.onFingerUp();
             }
         }
-        if (mUdfpsAnimation != null) {
-            mUdfpsAnimation.hide();
-        }
         mOnFingerDown = false;
         if (mView.isIlluminationRequested()) {
             mView.stopIllumination();
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsDrawable.java b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsDrawable.java
index 7bdddce2e1f4..55ed5aaff958 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsDrawable.java
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsDrawable.java
@@ -17,8 +17,6 @@
 package com.android.systemui.biometrics;
 
 import android.content.Context;
-import android.content.res.Resources;
-import android.content.pm.PackageManager;
 import android.graphics.ColorFilter;
 import android.graphics.Paint;
 import android.graphics.Rect;
@@ -26,17 +24,12 @@ import android.graphics.RectF;
 import android.graphics.drawable.Drawable;
 import android.graphics.drawable.ShapeDrawable;
 import android.graphics.drawable.shapes.PathShape;
-import android.provider.Settings;
 import android.util.PathParser;
 
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 
-import com.android.internal.util.cherish.CherishUtils;
-
-import com.android.systemui.Dependency;
 import com.android.systemui.R;
-import com.android.systemui.tuner.TunerService;
 
 /**
  * Abstract base class for drawable displayed when the finger is not touching the
@@ -45,23 +38,12 @@ import com.android.systemui.tuner.TunerService;
 public abstract class UdfpsDrawable extends Drawable {
     static final float DEFAULT_STROKE_WIDTH = 3f;
 
-    static final String UDFPS_ICON = "system:" + Settings.System.UDFPS_ICON;
-
-    String udfpsResourcesPackage = "com.cherish.udfps.resources";
-
     @NonNull final Context mContext;
     @NonNull final ShapeDrawable mFingerprintDrawable;
     private final Paint mPaint;
     private boolean mIlluminationShowing;
 
-    int mSelectedIcon = 0;
-
     int mAlpha = 255; // 0 - 255
-
-    Drawable mUdfpsDrawable;
-    Resources udfpsRes;
-    String[] mUdfpsIcons;
-
     public UdfpsDrawable(@NonNull Context context) {
         mContext = context;
         final String fpPath = context.getResources().getString(R.string.config_udfpsIcon);
@@ -73,33 +55,6 @@ public abstract class UdfpsDrawable extends Drawable {
         mPaint.setStyle(Paint.Style.STROKE);
         mPaint.setStrokeCap(Paint.Cap.ROUND);
         setStrokeWidth(DEFAULT_STROKE_WIDTH);
-
-        init();
-    }
-
-    void init() {
-        if (CherishUtils.isPackageInstalled(mContext, udfpsResourcesPackage)) {
-            try {
-                PackageManager pm = mContext.getPackageManager();
-                udfpsRes = pm.getResourcesForApplication(udfpsResourcesPackage);
-            } catch (PackageManager.NameNotFoundException e) {
-                e.printStackTrace();
-            }
-
-            int res = udfpsRes.getIdentifier("udfps_icons",
-                    "array", udfpsResourcesPackage);
-            mUdfpsIcons = udfpsRes.getStringArray(res);
-
-            TunerService.Tunable tunable = (key, newValue) -> {
-                if (UDFPS_ICON.equals(key)) {
-                    mSelectedIcon = newValue == null ? 0 : Integer.parseInt(newValue);
-                    mUdfpsDrawable = mSelectedIcon == 0 ? null :
-                            loadDrawable(udfpsRes,
-                                    mUdfpsIcons[mSelectedIcon]);
-                }
-            };
-            Dependency.get(TunerService.class).addTunable(tunable, UDFPS_ICON);
-        }
     }
 
     void setStrokeWidth(float strokeWidth) {
@@ -111,7 +66,7 @@ public abstract class UdfpsDrawable extends Drawable {
      * @param sensorRect the rect coordinates for the sensor area
      */
     public void onSensorRectUpdated(@NonNull RectF sensorRect) {
-        final int margin =  (int) sensorRect.height() / 16;
+        final int margin =  (int) sensorRect.height() / 8;
 
         final Rect bounds = new Rect((int) sensorRect.left + margin,
                 (int) sensorRect.top + margin,
@@ -125,9 +80,6 @@ public abstract class UdfpsDrawable extends Drawable {
      */
     protected void updateFingerprintIconBounds(@NonNull Rect bounds) {
         mFingerprintDrawable.setBounds(bounds);
-        if (mUdfpsDrawable != null) {
-            mUdfpsDrawable.setBounds(bounds);
-        }
         invalidateSelf();
     }
 
@@ -135,9 +87,6 @@ public abstract class UdfpsDrawable extends Drawable {
     public void setAlpha(int alpha) {
         mAlpha = alpha;
         mFingerprintDrawable.setAlpha(mAlpha);
-        if (mUdfpsDrawable != null) {
-            mUdfpsDrawable.setAlpha(mAlpha);
-        }
         invalidateSelf();
     }
 
@@ -145,16 +94,6 @@ public abstract class UdfpsDrawable extends Drawable {
         return mIlluminationShowing;
     }
 
-    Drawable getUdfpsDrawable() {
-        return mUdfpsDrawable;
-    }
-
-    Drawable loadDrawable(Resources res, String resName) {
-        int resId = res.getIdentifier(resName,
-                "drawable", udfpsResourcesPackage);
-        return res.getDrawable(resId);
-    }
-
     void setIlluminationShowing(boolean showing) {
         if (mIlluminationShowing == showing) {
             return;
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsEnrollDrawable.java b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsEnrollDrawable.java
index c065fc1ad595..9137dca6cc71 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsEnrollDrawable.java
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsEnrollDrawable.java
@@ -408,11 +408,6 @@ public class UdfpsEnrollDrawable extends UdfpsDrawable {
             return;
         }
 
-        if (getUdfpsDrawable() != null) {
-            getUdfpsDrawable().draw(canvas);
-            return;
-        }
-
         // Draw moving target
         if (mEnrollHelper != null && !mEnrollHelper.isCenterEnrollmentStage()) {
             canvas.save();
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsFpDrawable.java b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsFpDrawable.java
index f7081a70552d..09b6fabbdd15 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsFpDrawable.java
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsFpDrawable.java
@@ -18,8 +18,6 @@ package com.android.systemui.biometrics;
 
 import android.content.Context;
 import android.graphics.Canvas;
-import android.graphics.Rect;
-import android.graphics.RectF;
 
 import androidx.annotation.NonNull;
 
@@ -38,32 +36,6 @@ public class UdfpsFpDrawable extends UdfpsDrawable {
             return;
         }
 
-        if (getUdfpsDrawable() != null) {
-            getUdfpsDrawable().draw(canvas);
-            return;
-        }
-
         mFingerprintDrawable.draw(canvas);
     }
-
-    @Override
-    public void onSensorRectUpdated(@NonNull RectF sensorRect) {
-        super.onSensorRectUpdated(sensorRect);
-        final int margin =  (int) sensorRect.height() / 16;
-
-        final Rect bounds = new Rect((int) sensorRect.left + margin,
-                (int) sensorRect.top + margin,
-                (int) sensorRect.right - margin,
-                (int) sensorRect.bottom - margin);
-        updateFingerprintIconBounds(bounds);
-    }
-
-    @Override
-    protected void updateFingerprintIconBounds(@NonNull Rect bounds) {
-        super.updateFingerprintIconBounds(bounds);
-        if (getUdfpsDrawable() != null) {
-            getUdfpsDrawable().setBounds(bounds);
-            invalidateSelf();
-        }
-    }
 }
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsKeyguardView.java b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsKeyguardView.java
index 206a83d28598..9015396d26ab 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsKeyguardView.java
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsKeyguardView.java
@@ -26,7 +26,6 @@ import android.animation.ObjectAnimator;
 import android.content.Context;
 import android.graphics.PorterDuff;
 import android.graphics.PorterDuffColorFilter;
-import android.provider.Settings;
 import android.util.AttributeSet;
 import android.util.MathUtils;
 import android.view.View;
@@ -34,8 +33,6 @@ import android.widget.ImageView;
 
 import androidx.annotation.Nullable;
 
-import com.android.internal.util.cherish.CherishUtils;
-
 import com.android.settingslib.Utils;
 import com.android.systemui.R;
 import com.android.systemui.animation.Interpolators;
@@ -70,8 +67,6 @@ public class UdfpsKeyguardView extends UdfpsAnimationView {
     private float mBurnInProgress;
     private float mInterpolatedDarkAmount;
 
-    private boolean mCustomUdfpsIcon;
-
     public UdfpsKeyguardView(Context context, @Nullable AttributeSet attrs) {
         super(context, attrs);
         mFingerprintDrawable = new UdfpsFpDrawable(context);
@@ -96,8 +91,6 @@ public class UdfpsKeyguardView extends UdfpsAnimationView {
                 new KeyPath("**"), LottieProperty.COLOR_FILTER,
                 frameInfo -> new PorterDuffColorFilter(mTextColorPrimary, PorterDuff.Mode.SRC_ATOP)
         );
-
-        updateIcon();
     }
 
     @Override
@@ -119,16 +112,6 @@ public class UdfpsKeyguardView extends UdfpsAnimationView {
         return true;
     }
 
-    private void updateIcon() {
-        mCustomUdfpsIcon = Settings.System.getInt(mContext.getContentResolver(),
-                Settings.System.UDFPS_ICON, 0) != 0
-                && CherishUtils.isPackageInstalled(mContext,
-                "com.cherish.udfps.resources");
-        mBgProtection.setImageDrawable(mCustomUdfpsIcon
-                ? mFingerprintDrawable :
-                getContext().getDrawable(R.drawable.fingerprint_bg));
-    }
-
     private void updateBurnInOffsets() {
         mBurnInOffsetX = MathUtils.lerp(0f,
             getBurnInOffset(mMaxBurnInOffsetX * 2, true /* xAxis */)
@@ -146,8 +129,7 @@ public class UdfpsKeyguardView extends UdfpsAnimationView {
         mLockScreenFp.setTranslationX(mBurnInOffsetX);
         mLockScreenFp.setTranslationY(mBurnInOffsetY);
         mLockScreenFp.setProgress(1f - mInterpolatedDarkAmount);
-        mLockScreenFp.setAlpha(mCustomUdfpsIcon ? 0.0f
-                : (1f - mInterpolatedDarkAmount) * 255);
+        mLockScreenFp.setAlpha((1f - mInterpolatedDarkAmount) * 255);
     }
 
     void requestUdfps(boolean request, int color) {
@@ -161,6 +143,7 @@ public class UdfpsKeyguardView extends UdfpsAnimationView {
     void updateColor() {
         mTextColorPrimary = Utils.getColorAttrDefaultColor(mContext,
             android.R.attr.textColorPrimary);
+        mBgProtection.setImageDrawable(getContext().getDrawable(R.drawable.fingerprint_bg));
         mLockScreenFp.invalidate(); // updated with a valueCallback
     }
 
@@ -182,7 +165,7 @@ public class UdfpsKeyguardView extends UdfpsAnimationView {
     @Override
     protected int updateAlpha() {
         int alpha = super.updateAlpha();
-        mLockScreenFp.setAlpha(mCustomUdfpsIcon ? 0.0f : alpha / 255f);
+        mLockScreenFp.setAlpha(alpha / 255f);
         if (mInterpolatedDarkAmount != 0f) {
             mBgProtection.setAlpha(1f - mInterpolatedDarkAmount);
         } else {
-- 
2.17.1

